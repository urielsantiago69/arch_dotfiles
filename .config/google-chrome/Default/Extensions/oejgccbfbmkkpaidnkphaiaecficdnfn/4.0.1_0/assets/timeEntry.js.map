{"version":3,"file":"timeEntry.js","sources":["../../../node_modules/@toggl/track-api/src/lib/utils.ts","../../../node_modules/@toggl/track-api/src/index.ts","../../../src/lib/projectUtils.ts","../../../src/background/_internal/_api.ts","../../../src/background/_internal/user.ts","../../../src/lib/reminders.ts","../../../src/lib/timeEntries.ts","../../../src/lib/pomodoro.ts","../../../src/background/_internal/timeEntry.ts"],"sourcesContent":["export const parametrize = (params: Record<string, any>): string => {\n  const filteredParams = { ...params }\n  for (const param in params) {\n    if (\n      filteredParams[param] === undefined ||\n      filteredParams[param] === null ||\n      filteredParams[param] === ''\n    ) {\n      delete filteredParams[param]\n    }\n  }\n  const paramsString = new URLSearchParams(filteredParams).toString()\n  return paramsString ? `?${paramsString}` : ''\n}\n\n/**\n * @example\n *   useCustomHeaders([withDummyHeader, withAnotherDummyHeader])\n *   will return\n *   {\n *   headers: {\n *   'dummy-header': 'dummy-value',\n *   'another-dummy-header': 'another-d\n *   }\n *   }\n *\n * @param {Function[]} headersArray - Array of functions that return an object\n *   with the headers to be added\n * @returns {Object} Object with the headers to be added to the request\n */\nexport const useCustomHeaders = (\n  headersArray: [() => { [key: string]: string }]\n) => {\n  return {\n    headers: {\n      ...headersArray.reduce((acc, header) => {\n        return { ...acc, ...header() }\n      }, {}),\n    },\n  }\n}\n\n/**\n * @example\n *   withPermissions('true')\n *   will return\n *   {\n *   'x-toggl-permissions': 'true'\n *   }\n *\n * @param {string} usePermissions - String that represents the value of the\n *   x-toggl-permissions header, please note that the parameter won't be needed\n *   once permissions are fully available on production\n * @returns {Object} Object with the x-toggl-permissions header to be added to the request\n */\nexport const withPermissions = (\n  usePermissions: 'false' | 'true'\n): { 'x-toggl-permissions'?: 'true' } => {\n  return usePermissions === 'true'\n    ? { 'x-toggl-permissions': usePermissions }\n    : {}\n}\n","import {\n  type $Unsynced,\n  type AccountsSignup,\n  type AccountsUser,\n  type AccountsUserCredentials,\n  type AlertCreationData,\n  type AlertUpdationData,\n  type ApiInvoice,\n  type AppleIdSignInResponse,\n  type AvatarResponse,\n  type BaseUser,\n  type BulkEditOperation,\n  type BulkEditResponse,\n  type CalendarIntegration,\n  type CalendarIntegrationCalendar,\n  type CalendarIntegrationEvent,\n  type ChartDescriptor,\n  type ChartDescriptorDraft,\n  type ChartExportDescriptor,\n  type ChartExportKind,\n  type ChartUpdatePayload,\n  type Client,\n  type ClientServer,\n  type ClientsFilter,\n  type CloseAccountData,\n  type ComparativeFetchOptions,\n  type ComparativeResponsePeriod,\n  type ContactRequest,\n  type Country,\n  type CountryState,\n  type CsvImportData,\n  type CsvStatusResponse,\n  type CsvValidationData,\n  type CsvValidationResponse,\n  type Currency,\n  type CurrentUser,\n  type DashboardDescriptor,\n  type DashboardDescriptorDraft,\n  type DashboardExportDescriptor,\n  type DashboardExportKind,\n  type DataTrendsClientsFetchOptions,\n  type DataTrendsClientsResponse,\n  type DataTrendsProjectsFetchOptions,\n  type DataTrendsProjectsResponse,\n  type DataTrendsTeamResponse,\n  type DataTrendsUsersFetchOptions,\n  type DemoRequest,\n  type DetailedOrganizationUser,\n  type EmployeeProfitabilityFetchOptions,\n  type EmployeeProfitabilityResponse,\n  type EventDetailsSuggestion,\n  type Favorite,\n  type FeedbackData,\n  type FetchInvoiceData,\n  type FetchTasksData,\n  type FetchTasksParams,\n  type Flags,\n  type Group,\n  type IntegrationsService,\n  type Invitation,\n  type InvoiceSummary,\n  type Jira2Configuration,\n  type Jira2Integration,\n  type JiraMappingEntry,\n  type LinkedSSOProfile,\n  type Location,\n  type Login,\n  type LostPasswords,\n  type LostPasswordsNewPassword,\n  type LostPasswordsToken,\n  type LostPasswordsUser,\n  type MasterRequest,\n  type MePreferences,\n  type MeReminder,\n  type MeetRequest,\n  type Notification,\n  type OAuthGoogleURL,\n  type Organization,\n  type OrganizationCustomer,\n  type OrganizationFeatures,\n  type OrganizationGroup,\n  type OrganizationGroupPayload,\n  type OrganizationInvoices,\n  type OrganizationMetrics,\n  type OrganizationOwner,\n  type OrganizationOwnerTransfer,\n  type OrganizationOwnerTransferAction,\n  type OrganizationPayload,\n  type OrganizationPricingPlans,\n  type OrganizationSubscription,\n  type OrganizationSubscriptionCalculation,\n  type OrganizationSubscriptionContactDetailsPayload,\n  type OrganizationSubscriptionCustomer,\n  type OrganizationSubscriptionSetupIntent,\n  type OrganizationUser,\n  type OrganizationUserPayload,\n  type OrganizationUsersFetchOptions,\n  type PaymentRecord,\n  type PaymentsResponse,\n  type PlanProjectResponse,\n  type PlanUser,\n  type PlanWorkspaceResponse,\n  type PricingPlan,\n  type Project,\n  type ProjectBillableAmountsResponse,\n  type ProjectCreateProperties,\n  type ProjectDeletionMode,\n  type ProjectGroup,\n  type ProjectProfitabilityFetchOptions,\n  type ProjectProfitabilityResponse,\n  type ProjectSummary,\n  type ProjectTemplate,\n  type ProjectUser,\n  type QuickBooksCustomer,\n  type QuickBooksIntegration,\n  type RecurringProjectPeriod,\n  type ReportsDataClient,\n  type ReportsDataUser,\n  type ReportsExport,\n  type ReportsParams,\n  type ReportsSearchTimeEntries,\n  type ReportsSearchTotals,\n  type ReportsSummary,\n  type ResourceLinkPayload,\n  type SalesforceConfiguration,\n  type SalesforceIntegration,\n  type SavedReport,\n  type SavedReportParams,\n  type ScheduledReport,\n  type SegmentationRecord,\n  type SharePermission,\n  type SharedDescriptor,\n  type SharedReportApi,\n  type SharedReportParams,\n  type Signup,\n  type SignupUser,\n  type Since,\n  type SsoBeginRequest,\n  type SsoEnableRequest,\n  type SsoProfile,\n  type SubscribeParams,\n  type Tag,\n  type TagServer,\n  type TaskV9,\n  type TeamsActivityTableState,\n  type TeamsMostActiveState,\n  type TimeEntry,\n  type TimeEntryConstraints,\n  type TimeEntryInvitation,\n  type TimeEntryParams,\n  type TimeEntryRequest,\n  type TimeEntryV9,\n  type TimelineEvent,\n  type Timesheet,\n  type TimesheetHour,\n  type TimesheetListAPIFilters,\n  type TimesheetSetup,\n  type TimesheetSetupAPIFilters,\n  type TimesheetSetupCreation,\n  type TimezoneOffsets,\n  type Timezones,\n  type Unsubscribe,\n  type User,\n  type WebhookSubscription,\n  type WebhookSubscriptionEvent,\n  type WebhookSubscriptionEventFilter,\n  type WebhookSubscriptionParameters,\n  type WeeklyReportEntries,\n  type WithRateChangePayload,\n  type Workspace,\n  type WorkspaceAlert,\n  type WorkspaceAssignmentPayload,\n  type WorkspaceExport,\n  type WorkspaceExportData,\n  type WorkspaceFeatures,\n  type WorkspaceLogo,\n  type WorkspacePayload,\n  type WorkspacePlans,\n  type WorkspacePreferences,\n  type WorkspaceRate,\n  type WorkspaceRatePayload,\n  type WorkspaceReminder,\n  type WorkspaceSSOConfig,\n  type WorkspaceSSOFetch,\n  type WorkspaceStatisticsMap,\n  type WorkspaceSubscription,\n  type WorkspaceSubscriptionCalculation,\n  type WorkspaceUser,\n} from '@toggl/track-types'\n\nimport { Base, RequestError, type TrackResponse } from './lib/base'\nimport { ApiCache } from './lib/cache'\nimport { parametrize, useCustomHeaders, withPermissions } from './lib/utils'\n\nexport { RequestError }\nexport type { TrackResponse }\nexport { ApiCache }\n\ninterface Endpoints {\n  accounts: {\n    closeAccount: {\n      track: (data: CloseAccountData) => TrackResponse<AccountsUser>\n    }\n    me: {\n      fetch: () => TrackResponse<AccountsUser>\n      update: (data: Partial<AccountsUser>) => TrackResponse<AccountsUser>\n    }\n    sessions: {\n      check: () => TrackResponse<{ success: true }>\n      login: (\n        credentials: AccountsUserCredentials\n      ) => TrackResponse<AccountsUser>\n      logout: (closeAllSessions?: boolean) => TrackResponse<void>\n    }\n    signup: (signup: AccountsSignup) => TrackResponse<AccountsUser>\n    sso: {\n      profiles: {\n        fetch: () => TrackResponse<ReadonlyArray<SsoProfile>>\n      }\n    }\n  }\n\n  analytics: {\n    charts: {\n      create: (data: ChartDescriptorDraft) => TrackResponse<{ id: number }>\n      list: (orgId: number) => TrackResponse<ChartDescriptor[]>\n      fetch: (chartId: number) => TrackResponse<ChartDescriptor>\n      delete: (chartId: number) => TrackResponse<void>\n      update: (\n        chartId: number,\n        changes: ChartUpdatePayload\n      ) => TrackResponse<void>\n      userOptions: {\n        update: (\n          chartId: number,\n          changes: { pinned: boolean }\n        ) => TrackResponse<void>\n      }\n      privileges: {\n        update: (\n          chartId: number,\n          permissions: SharePermission[]\n        ) => TrackResponse<void>\n        delete: (\n          chartId: number,\n          permission: Omit<SharePermission, 'type'>\n        ) => TrackResponse<void>\n      }\n      tokens: {\n        update: (\n          chartId: number,\n          changes: ResourceLinkPayload\n        ) => TrackResponse<{ token: string }>\n      }\n      dashboards: {\n        list: (chartId: number) => TrackResponse<DashboardDescriptor[]>\n      }\n    }\n    dashboards: {\n      create: (data: DashboardDescriptorDraft) => TrackResponse<{ id: number }>\n      list: (orgId: number) => TrackResponse<DashboardDescriptor[]>\n      fetch: (dashboardId: number) => TrackResponse<DashboardDescriptor>\n      delete: (dashboardId: number) => TrackResponse<void>\n      update: (\n        dashboardId: number,\n        changes: Partial<DashboardDescriptor>\n      ) => TrackResponse<void>\n      charts: {\n        fetch: (dashboardId: number) => TrackResponse<ChartDescriptor[]>\n      }\n      userOptions: {\n        update: (\n          dashboardId: number,\n          changes: { pinned: boolean }\n        ) => TrackResponse<void>\n      }\n      privileges: {\n        update: (\n          dashboardId: number,\n          permissions: SharePermission[]\n        ) => TrackResponse<void>\n        delete: (\n          dashboardId: number,\n          permission: Omit<SharePermission, 'type'>\n        ) => TrackResponse<void>\n      }\n      tokens: {\n        update: (\n          chartId: number,\n          changes: ResourceLinkPayload\n        ) => TrackResponse<{ token: string }>\n      }\n    }\n    exports: {\n      chart: (\n        descriptor: ChartExportDescriptor,\n        kind: ChartExportKind,\n        useToken?: boolean\n      ) => TrackResponse<ArrayBuffer | string>\n      dashboard: (\n        descriptor: DashboardExportDescriptor,\n        kind: DashboardExportKind,\n        useToken?: boolean\n      ) => TrackResponse<ArrayBuffer | string>\n    }\n    shared: {\n      fetch: (token: string) => TrackResponse<SharedDescriptor>\n    }\n  }\n\n  approvals: {\n    timesheetSetup: {\n      list: (\n        wid: number,\n        filters: TimesheetSetupAPIFilters\n      ) => TrackResponse<{ data: TimesheetSetup[] }>\n      update: (\n        wid: number,\n        setupId: number,\n        updateFields: Partial<TimesheetSetup>\n      ) => TrackResponse<TimesheetSetup>\n      create: (\n        wid: number,\n        data: TimesheetSetupCreation\n      ) => TrackResponse<TimesheetSetup[]>\n      delete: (wid: number, timesheetSetupId: number) => TrackResponse<string>\n    }\n    timesheet: {\n      list: (\n        wid: number,\n        filters: TimesheetListAPIFilters\n      ) => TrackResponse<{\n        data: Timesheet[]\n        total_count: number\n        per_page: number\n        page: number\n      }>\n      hours: (\n        wid: number,\n        data: Pick<Timesheet, 'timesheet_setup_id' | 'start_date'>[]\n      ) => TrackResponse<TimesheetHour[]>\n      update: (\n        wid: number,\n        setupId: number,\n        startDate: string,\n        data: Pick<Timesheet, 'rejection_comment' | 'status'>\n      ) => TrackResponse<Timesheet>\n      timeEntries: (\n        wid: number,\n        setupId: number,\n        startDate: string\n      ) => TrackResponse<TimeEntry[]>\n    }\n  }\n\n  auth: {\n    saml2login: (\n      ssoBegin: SsoBeginRequest\n    ) => TrackResponse<{ sso_url: string }>\n  }\n\n  avatar: {\n    gravatar: () => TrackResponse<AvatarResponse>\n    remove: () => TrackResponse<void>\n    upload: (file: File) => TrackResponse<AvatarResponse>\n  }\n\n  calendar: {\n    deleteCalendarIntegration: (integrationId: number) => TrackResponse<void>\n    fetchCalendarIntegrationCalendars: (\n      integrationId: number,\n      selectedOnly: boolean,\n      pageToken?: string\n    ) => TrackResponse<{\n      calendars: CalendarIntegrationCalendar[]\n      next_page_token: string\n    }>\n    fetchCalendarIntegrationEvents: (\n      startDate: string,\n      endDate: string,\n      pageToken?: string\n    ) => TrackResponse<{\n      events: CalendarIntegrationEvent[]\n      next_page_token: string\n    }>\n    fetchCalendarIntegrations: () => TrackResponse<CalendarIntegration[]>\n    getEventDetailsSuggestion: (\n      eventId: number\n    ) => TrackResponse<EventDetailsSuggestion>\n    refreshCalendarList: (integrationId: number) => TrackResponse<void>\n    refreshEvents: () => TrackResponse<{ fetched_events: number }>\n    updateCalendar: (\n      integrationId: number,\n      calendarId: number,\n      changes: { selected: boolean }\n    ) => TrackResponse<void>\n    getBulkEventDetailsSuggestion: (events: {\n      event_ids: number[]\n    }) => TrackResponse<{\n      suggestions: [\n        {\n          event_id: number\n          suggestion: EventDetailsSuggestion\n        }\n      ]\n    }>\n  }\n\n  client: {\n    archive: (client: Client) => TrackResponse<Array<Project['id']>>\n    create: (client: $Unsynced<Client>) => TrackResponse<ClientServer>\n    delete: (client: Client) => TrackResponse<void>\n    fetch: (\n      workspaceId: number,\n      filter?: ClientsFilter\n    ) => TrackResponse<ClientServer[]>\n    restore: (\n      client: Client,\n      projects: Array<Project['id']> | 'all'\n    ) => TrackResponse<{\n      client: ClientServer\n      projects: Array<Project['id']> | 'all'\n    }>\n    update: (client: Client) => TrackResponse<ClientServer>\n  }\n\n  countries: {\n    fetch: () => TrackResponse<ReadonlyArray<Country>>\n    fetchStates: (\n      countryId: number\n    ) => TrackResponse<ReadonlyArray<CountryState>>\n  }\n\n  csv: {\n    import: (data: CsvImportData) => TrackResponse<void>\n    status: (data: CsvImportData) => TrackResponse<CsvStatusResponse>\n    validate: (data: CsvValidationData) => TrackResponse<CsvValidationResponse>\n  }\n\n  currencies: () => TrackResponse<ReadonlyArray<Currency>>\n\n  feedback: {\n    send: (data: FeedbackData) => TrackResponse<void>\n  }\n\n  flags: {\n    change: (flags: Flags) => TrackResponse<void>\n    fetch: () => TrackResponse<Flags>\n  }\n\n  insights: {\n    workspace: {\n      dataTrends: {\n        projects: (\n          workspaceId: number,\n          options: DataTrendsProjectsFetchOptions\n        ) => TrackResponse<DataTrendsProjectsResponse>\n      }\n      profitability: {\n        employeesExport: (\n          workspaceId: number,\n          options: EmployeeProfitabilityFetchOptions,\n          extension: ReportsExport\n        ) => TrackResponse<ArrayBuffer | string>\n        projectsExport: (\n          workspaceId: number,\n          options: ProjectProfitabilityFetchOptions,\n          extension: ReportsExport\n        ) => TrackResponse<ArrayBuffer | string>\n      }\n      trends: {\n        projectsExport: (\n          workspaceId: number,\n          options: DataTrendsProjectsFetchOptions,\n          extension: ReportsExport\n        ) => TrackResponse<ArrayBuffer | string>\n      }\n    }\n  }\n\n  integrations: {\n    authService: (\n      workspaceId: number,\n      service: IntegrationsService,\n      redirectUrl: string\n    ) => TrackResponse<{ auth_url: string }>\n    createConfiguration: (\n      workspaceId: number,\n      service: IntegrationsService,\n      configuration: SalesforceConfiguration | Jira2Configuration,\n      enabled: boolean\n    ) => TrackResponse<SalesforceIntegration | Jira2Integration>\n    deleteConfiguration: (\n      workspaceId: number,\n      service: IntegrationsService\n    ) => TrackResponse<void>\n    getIntegrations: (workspaceId: number) => TrackResponse<{\n      salesforce: SalesforceIntegration\n      jira2: Jira2Integration\n      quickbooks: QuickBooksIntegration\n    }>\n    removeAuthService: (\n      workspaceId: number,\n      service: IntegrationsService\n    ) => TrackResponse<void>\n    setServiceEnabled: (\n      workspaceId: number,\n      service: IntegrationsService,\n      enabled: boolean\n    ) => TrackResponse<{ enabled: boolean }>\n    sync: (\n      workspaceId: number,\n      service: IntegrationsService\n    ) => TrackResponse<{ is_syncing?: boolean; last_synced?: string | null }>\n    updateConfiguration: (\n      workspaceId: number,\n      service: IntegrationsService,\n      configuration: SalesforceConfiguration | Jira2Configuration,\n      enabled: boolean\n    ) => TrackResponse<SalesforceIntegration | Jira2Integration>\n    validateJira2Filtering: (\n      workspaceId: number,\n      jira_active_site: string,\n      filtering_data: JiraMappingEntry\n    ) => TrackResponse<string>\n    getQuickBooksCustomers: (\n      workspaceId: number\n    ) => TrackResponse<ReadonlyArray<QuickBooksCustomer>>\n    submitInvoiceToQuickBooks: (\n      workspaceId: number,\n      invoiceData: {\n        customer_id: string\n        user_invoice_id: number\n      }\n    ) => TrackResponse<{\n      document_number: string\n      invoice_id: string\n      invoice_url: string\n    }>\n  }\n\n  invitations: {\n    invitation: (code: string) => TrackResponse<Invitation>\n  }\n\n  location: () => TrackResponse<Location>\n\n  me: {\n    /** @deprecated This method is moved to Toggl Account API and will be removed soon */\n    acceptTermsOfService: () => TrackResponse<void>\n    /**\n     * @deprecated This method is moved to Toggl Account API and will be removed soon\n     * @param currentPassword\n     * @param newPassword\n     */\n    changePassword: (\n      currentPassword: string,\n      newPassword: string\n    ) => TrackResponse<void>\n    clients: { list: (since: Since) => TrackResponse<Client[]> }\n    /**\n     * @deprecated This method is moved to Toggl Account API and will be removed soon\n     * @param data\n     */\n    closeAccount: (data: CloseAccountData) => TrackResponse<void>\n    disableOAuth: {\n      /** @deprecated This method is moved to Toggl Account API and will be removed soon */\n      apple: () => TrackResponse<void>\n      /** @deprecated This method is moved to Toggl Account API and will be removed soon */\n      google: () => TrackResponse<void>\n    }\n    enableOAuth: {\n      /**\n       * @deprecated This method is moved to Toggl Account API and will be removed soon\n       * @param token\n       */\n      apple: (token: string) => TrackResponse<void>\n      /**\n       * @deprecated This method is moved to Toggl Account API and will be removed soon\n       * @param code\n       */\n      google: (code: string) => TrackResponse<void>\n    }\n    /**\n     * @deprecated This method is moved to Toggl Account API and will be removed soon\n     * @param ssoEnable\n     */\n    enableSso: (ssoEnable: SsoEnableRequest) => TrackResponse<void>\n    export: {\n      create: (data: {\n        profile?: boolean\n        timeline?: boolean\n      }) => TrackResponse<void>\n      get: () => TrackResponse<\n        ReadonlyArray<{ state: string; token: string | null }>\n      >\n    }\n    favorites: {\n      create: (\n        data: Partial<Omit<Favorite, 'favorite_id'>>,\n        meta?: boolean\n      ) => TrackResponse<Favorite>\n      update: (\n        data: Favorite[],\n        meta?: boolean\n      ) => TrackResponse<ReadonlyArray<Favorite>>\n      delete: (favoriteId: number) => TrackResponse<void>\n      list: (meta?: boolean) => TrackResponse<ReadonlyArray<Favorite>>\n      suggestions: () => TrackResponse<void>\n    }\n    features: {\n      list: () => TrackResponse<WorkspaceFeatures[]>\n      organization: {\n        list: () => TrackResponse<OrganizationFeatures[]>\n      }\n    }\n    get: () => TrackResponse<CurrentUser>\n    /**\n     * @deprecated This method is moved to Toggl Account API and will be removed soon\n     * @param login\n     */\n    login(login: Login): TrackResponse<BaseUser>\n    /** @deprecated This method is moved to Toggl Account API and will be removed soon */\n    logout(): TrackResponse<void>\n    /**\n     * @deprecated This method is moved to Toggl Account API and will be removed soon\n     * @param lostPassword\n     */\n    lostPasswords(lostPassword: LostPasswords): TrackResponse<void>\n    /**\n     * @deprecated This method is moved to Toggl Account API and will be removed soon\n     * @param password\n     */\n    lostPasswordsNewPassword(\n      password: LostPasswordsNewPassword\n    ): TrackResponse<void>\n    /**\n     * @deprecated This method is moved to Toggl Account API and will be removed soon\n     * @param token\n     */\n    lostPasswordsToken(\n      token: LostPasswordsToken\n    ): TrackResponse<LostPasswordsUser>\n    notifications: {\n      delete: (id: number) => TrackResponse<void>\n      list: () => TrackResponse<ReadonlyArray<Notification>>\n    }\n    preferences: {\n      fetch: () => TrackResponse<MePreferences>\n      update: (\n        updatedPreferences: Partial<MePreferences>\n      ) => TrackResponse<void>\n    }\n    organizations: {\n      list: () => TrackResponse<Organization[]>\n    }\n    projects: { list: (since: Since) => TrackResponse<Project[]> }\n    reminders: { list: () => TrackResponse<MeReminder[]> }\n    resetToken: () => TrackResponse<string>\n    tags: { list: (since: Since) => TrackResponse<TagServer[]> }\n    tasks: { list: (since: Since, meta?: boolean) => TrackResponse<TaskV9[]> }\n    timeEntries: {\n      current: () => TrackResponse<TimeEntryV9>\n      fetch: (\n        startDate: string,\n        stopDate: string,\n        meta?: boolean,\n        include_sharing?: boolean\n      ) => TrackResponse<TimeEntryV9>\n      list: (since: Since, meta?: boolean) => TrackResponse<TimeEntryV9[]>\n    }\n    timeEntryInvitations: {\n      fetch: (since?: number) => TrackResponse<TimeEntryInvitation[]>\n      accept: (workspaceId: number, invitationId: number) => void\n      reject: (workspaceId: number, invitationId: number) => void\n    }\n    timesheets: {\n      list: (\n        filters?: Pick<TimesheetListAPIFilters, 'before' | 'after'>\n      ) => TrackResponse<Timesheet[]>\n    }\n    unsubscribe: (data: Unsubscribe) => TrackResponse<string>\n    /**\n     * @deprecated This method is moved to Toggl Account API and will be removed soon\n     * @param data\n     */\n    update: (data: CurrentUser) => TrackResponse<void>\n    workspaces: {\n      list: (since: Since) => TrackResponse<Workspace[]>\n    }\n  }\n\n  oauth: {\n    appleCallback: (\n      data: AppleIdSignInResponse\n    ) => TrackResponse<OAuthGoogleURL>\n    oauthUrl: (state: string) => TrackResponse<OAuthGoogleURL>\n  }\n\n  organization: {\n    create: (\n      organizationName: string,\n      workspaceName?: string\n    ) => TrackResponse<{\n      id: number\n      name: string\n      workspace_id: number\n      workspace_name: string\n    }>\n    customer: {\n      get: (organizationId: number) => TrackResponse<OrganizationCustomer>\n      saveContactDetails: (\n        organizationId: number,\n        contactDetails: OrganizationSubscriptionContactDetailsPayload\n      ) => TrackResponse<void>\n    }\n    get: (organizationId: number) => TrackResponse<Organization>\n    groups: {\n      create: (\n        organizationId: number,\n        group: OrganizationGroupPayload\n      ) => TrackResponse<OrganizationGroup>\n      delete: (\n        organizationId: number,\n        organizationGroupId: number\n      ) => TrackResponse<void>\n      list: (\n        organizationId: number\n      ) => TrackResponse<ReadonlyArray<OrganizationGroup>>\n      update: (\n        organizationId: number,\n        organizationGroupId: number,\n        group: OrganizationGroupPayload\n      ) => TrackResponse<OrganizationGroup>\n    }\n    invitations: {\n      accept: (invitationCode: string) => TrackResponse<Invitation>\n      invite: (\n        organizationId: number,\n        data: {\n          emails: ReadonlyArray<string>\n          workspaces: ReadonlyArray<{ workspace_id: number; admin: boolean }>\n        }\n      ) => TrackResponse<void>\n      reject: (invitationCode: string) => TrackResponse<void>\n      resend: (\n        organizationId: number,\n        invitationCode: string\n      ) => TrackResponse<void>\n    }\n    metrics: {\n      fetch: (organizationId: number) => TrackResponse<OrganizationMetrics>\n    }\n    owner: {\n      createTransfer: (\n        organizationId: number,\n        newOwnerId: number\n      ) => TrackResponse<OrganizationOwnerTransfer>\n      get: (organizationId: number) => TrackResponse<OrganizationOwner>\n      getTransfers: (\n        organizationId: number,\n        ongoing?: boolean\n      ) => TrackResponse<ReadonlyArray<OrganizationOwnerTransfer>>\n      updateTransfer: (\n        organizationId: number,\n        transferId: number,\n        action: OrganizationOwnerTransferAction\n      ) => TrackResponse<OrganizationOwnerTransfer>\n    }\n    subscription: {\n      delete: (\n        organizationId: number,\n        immediateCancel?: boolean\n      ) => TrackResponse<void>\n      get: (organizationId: number) => TrackResponse<OrganizationSubscription>\n      calculate: (\n        organizationId: number,\n        userCount: number,\n        period?: number\n      ) => TrackResponse<OrganizationSubscriptionCalculation>\n      purchaseOrders: {\n        create: (\n          organizationId: number,\n          userCount: number\n        ) => TrackResponse<void>\n      }\n      update: (\n        organizationId: number,\n        changes: Partial<OrganizationSubscription>\n      ) => TrackResponse<OrganizationSubscription>\n    }\n    subscriptionNext: {\n      get: (organizationId: number) => TrackResponse<OrganizationSubscription>\n      create: (\n        organizationId: number,\n        priceTag: string\n      ) => TrackResponse<OrganizationSubscription>\n      update: (\n        organizationId: number,\n        priceTag: string\n      ) => TrackResponse<OrganizationSubscription>\n      createSetupIntent: (\n        organizationId: number\n      ) => TrackResponse<OrganizationSubscriptionSetupIntent>\n      customer: {\n        get: (\n          organizationId: number\n        ) => TrackResponse<OrganizationSubscriptionCustomer>\n        create: (\n          organizationId: number,\n          name: string,\n          email: string,\n          postalCode: string,\n          country: string,\n          state?: string,\n          taxNumber?: string,\n          address?: string\n        ) => TrackResponse<OrganizationSubscriptionCustomer>\n        update: (\n          organizationId: number,\n          name: string,\n          email: string,\n          postalCode: string,\n          country: string,\n          state?: string,\n          taxNumber?: string,\n          address?: string\n        ) => TrackResponse<OrganizationSubscriptionCustomer>\n      }\n      promoCode: {\n        apply: (\n          organizationId: number,\n          promoCode: string\n        ) => TrackResponse<void>\n        delete: (organizationId: number) => TrackResponse<void>\n      }\n      invoices: {\n        list: (organizationId: number) => TrackResponse<OrganizationInvoices>\n        next: (\n          organizationId: number,\n          next: string\n        ) => TrackResponse<OrganizationInvoices>\n        prev: (\n          organizationId: number,\n          prev: string\n        ) => TrackResponse<OrganizationInvoices>\n      }\n      invoiceSummary: {\n        fetch: (organizationId: number) => TrackResponse<InvoiceSummary>\n        calculate: (\n          organizationId: number,\n          planTag: string,\n          userCount: number\n        ) => TrackResponse<InvoiceSummary>\n      }\n      trial: {\n        start: (organizationId: number) => TrackResponse<void>\n      }\n    }\n    paymentRecords: {\n      list: (\n        organizationId: number\n      ) => TrackResponse<ReadonlyArray<PaymentRecord>>\n    }\n    plans: {\n      list: (organizationId: number) => TrackResponse<OrganizationPricingPlans>\n    }\n    segmentation: {\n      list: (\n        organizationId: number\n      ) => TrackResponse<ReadonlyArray<SegmentationRecord>>\n      update: (\n        organizationId: number,\n        changes: SegmentationRecord\n      ) => TrackResponse<SegmentationRecord>\n    }\n    saveFeedback: (\n      organizationId: number,\n      pricingPlanId: number,\n      data: {\n        comment: string\n        selections: ReadonlyArray<{ [index: number]: string }>\n      }\n    ) => TrackResponse<void>\n    update: (\n      organizationId: number,\n      organization: OrganizationPayload\n    ) => TrackResponse<void>\n    users: {\n      delete: (\n        organizationId: number,\n        organizationUserIds: ReadonlyArray<number>\n      ) => TrackResponse<void>\n      leave: (organizationId: number) => TrackResponse<void>\n      list: (\n        organizationId: number,\n        options: OrganizationUsersFetchOptions\n      ) => TrackResponse<ReadonlyArray<OrganizationUser>>\n      update: (\n        organizationId: number,\n        organizationUserId: number,\n        organizationUser: Partial<OrganizationUserPayload>\n      ) => TrackResponse<OrganizationUser>\n      detailed: (\n        organizationId: number,\n        options: OrganizationUsersFetchOptions\n      ) => TrackResponse<ReadonlyArray<DetailedOrganizationUser>>\n    }\n    workspaces: {\n      addAssignments: (\n        organizationId: number,\n        workspaceId: number,\n        data: WorkspaceAssignmentPayload\n      ) => TrackResponse<void>\n      create: (\n        organizationId: number,\n        workspace: WorkspacePayload\n      ) => TrackResponse<Workspace>\n      groups: {\n        list: (\n          organizationId: number,\n          workspaceId: number\n        ) => TrackResponse<ReadonlyArray<OrganizationGroup>>\n      }\n      leave: (\n        organizationId: number,\n        workspaceId: number,\n        workspaceUsersIds: number[]\n      ) => TrackResponse<void>\n      statistics: (\n        organizationId: number\n      ) => TrackResponse<WorkspaceStatisticsMap>\n      users: {\n        list: (\n          organizationId: number,\n          workspaceId: number,\n          filters?: { name?: string }\n        ) => TrackResponse<ReadonlyArray<WorkspaceUser>>\n      }\n    }\n  }\n\n  payments: {\n    subscribe: (params: SubscribeParams) => TrackResponse<string>\n    updateCardDetails: (\n      workspaceId: number,\n      token: string\n    ) => TrackResponse<PaymentsResponse>\n    updateOrganizationCardDetails: (\n      organizationId: number,\n      token: string\n    ) => TrackResponse<PaymentsResponse>\n  }\n\n  plan: {\n    me: () => TrackResponse<PlanUser>\n    projects: (workspaceId: number) => TrackResponse<unknown>\n    tasks: (\n      worksapceId: number,\n      userId: number,\n      start: string,\n      end: string\n    ) => TrackResponse<unknown>\n    planProject: (trackProjectId: number) => TrackResponse<PlanProjectResponse>\n    workspace: (workspaceId: number) => TrackResponse<PlanWorkspaceResponse>\n  }\n\n  project: {\n    bulkEdit: (\n      workspaceId: number,\n      projectIds: number[],\n      body: { op: 'replace' | 'remove'; key: string; value: unknown }[]\n    ) => TrackResponse<BulkEditResponse>\n    create: (\n      workspaceId: number,\n      data: ProjectCreateProperties\n    ) => TrackResponse<Project>\n    createProjectGroup: (\n      workspaceId: number,\n      projectGroup: Partial<{\n        readonly group_id: number\n        readonly project_id: number\n      }>\n    ) => TrackResponse<ProjectGroup>\n    createProjectUser: (\n      workspaceId: number,\n      projectUser: Partial<WithRateChangePayload<ProjectUser>>\n    ) => TrackResponse<ProjectUser>\n    delete: (\n      workspaceId: number,\n      projectId: number,\n      deletionMode: ProjectDeletionMode\n    ) => TrackResponse<void>\n    deleteProjectGroup: (\n      workspaceId: number,\n      projectGroupId: number\n    ) => TrackResponse<void>\n    deleteProjectUser: (\n      workspaceId: number,\n      projectUserId: number\n    ) => TrackResponse<void>\n    fetchProjectsBillableAmounts: (\n      workspaceId: number,\n      projectIds: ReadonlyArray<number>\n    ) => TrackResponse<ReadonlyArray<ProjectBillableAmountsResponse>>\n    fetchProjectById: (\n      workspaceId: number,\n      projectId: number,\n      args?: Partial<{\n        readonly with_first_time_entry?: boolean\n      }>\n    ) => TrackResponse<Project>\n    fetchProjectGroups: (\n      workspaceId: number\n    ) => TrackResponse<ReadonlyArray<ProjectGroup>>\n    fetchProjectsPage: (\n      workspaceId: number,\n      page: number,\n      filters?: Partial<{\n        active?: boolean\n        actual_hours?: boolean\n        billable?: 'both' | true | false\n        client_ids?: number[]\n        force?: boolean\n        group_ids?: number[]\n        name?: string\n        user_ids?: number[]\n        per_page?: number\n      }>,\n      sort?: Partial<{ sort_field?: string; sort_order?: 'asc' | 'desc' }>\n    ) => TrackResponse<ReadonlyArray<Project>>\n    fetchProjectSummary: (\n      workspaceId: number,\n      projectId: number,\n      start?: string,\n      end?: string\n    ) => TrackResponse<ProjectSummary>\n    fetchProjectUsers: (\n      workspaceId: number,\n      projectIds?: ReadonlyArray<number>\n    ) => TrackResponse<ReadonlyArray<ProjectUser>>\n    fetchRecurringPeriods: (\n      workspaceId: number,\n      projectId: number\n    ) => TrackResponse<ReadonlyArray<RecurringProjectPeriod>>\n    update: (\n      workspaceId: number,\n      projectId: number,\n      data: WithRateChangePayload<Project>\n    ) => TrackResponse<Project>\n    updateProjectUser: (\n      workspaceId: number,\n      projectUserId: number,\n      changes: WithRateChangePayload<ProjectUser>\n    ) => TrackResponse<ProjectUser>\n    fetchProjectStatistics: (\n      workspaceId: number,\n      projectId: number\n    ) => TrackResponse<{\n      earliest_time_entry?: string\n      latest_time_entry?: string\n    }>\n  }\n\n  pushService: {\n    create: (token: string) => TrackResponse<void>\n    delete: (token: string) => TrackResponse<void>\n  }\n\n  reportExports: {\n    summary: (\n      workspaceId: number,\n      params: Partial<ReportsParams>,\n      kind: ReportsExport\n    ) => TrackResponse<ArrayBuffer | string>\n    detailed: (\n      workspaceId: number,\n      params: Partial<ReportsParams>,\n      kind: ReportsExport\n    ) => TrackResponse<ArrayBuffer | string>\n    weekly: (\n      workspaceId: number,\n      params: Partial<ReportsParams>,\n      kind: ReportsExport\n    ) => TrackResponse<ArrayBuffer | string>\n  }\n\n  reports: {\n    filters: {\n      projects: (\n        workspaceId: number,\n        params: { ids?: number[]; start?: number; page_size?: number }\n      ) => TrackResponse<Project[]>\n      tasks: (\n        workspaceId: number,\n        params: { ids?: number[]; start?: number; page_size?: number }\n      ) => TrackResponse<TaskV9[]>\n    }\n    status: () => TrackResponse<void>\n    workspace: {\n      comparative: (\n        workspaceId: number,\n        options: ComparativeFetchOptions\n      ) => TrackResponse<ComparativeResponsePeriod>\n      dataTrends: {\n        clients: (\n          workspaceId: number,\n          options: DataTrendsClientsFetchOptions\n        ) => TrackResponse<DataTrendsClientsResponse>\n        users: (\n          workspaceId: number,\n          options: DataTrendsUsersFetchOptions\n        ) => TrackResponse<DataTrendsTeamResponse>\n      }\n      detailed: {\n        timeEntries: {\n          export: (\n            workspaceId: number,\n            params: Partial<ReportsParams>,\n            kind: ReportsExport\n          ) => TrackResponse<ArrayBuffer | string>\n          legacyExportV2: (\n            params: Partial<ReportsParams>,\n            kind: ReportsExport\n          ) => TrackResponse<ArrayBuffer | string>\n        }\n      }\n      profitability: {\n        employee: (\n          workspaceId: number,\n          options: EmployeeProfitabilityFetchOptions\n        ) => TrackResponse<EmployeeProfitabilityResponse>\n        projects: (\n          workspaceId: number,\n          options: ProjectProfitabilityFetchOptions\n        ) => TrackResponse<ProjectProfitabilityResponse>\n      }\n      search: {\n        projects: {\n          fetch: (\n            workspaceId: number | string,\n            params: {\n              ids: ReadonlyArray<number | string>\n              include_recurring_totals?: boolean\n            }\n          ) => TrackResponse<Project[]>\n        }\n        clients: {\n          fetch: (\n            workspaceId: number | string,\n            params: { ids: ReadonlyArray<number | string> }\n          ) => TrackResponse<ReportsDataClient[]>\n        }\n        users: {\n          fetch: (\n            workspaceId: number | string,\n            params: {\n              ids: ReadonlyArray<number | string>\n              active?: boolean | null\n            }\n          ) => TrackResponse<ReportsDataUser[]>\n        }\n        tasks: {\n          fetch: (\n            workspaceId: number | string,\n            params:\n              | { ids: ReadonlyArray<number | string> }\n              | { project_ids: ReadonlyArray<number | string | null> }\n          ) => TrackResponse<TaskV9[]>\n          fetchById: (\n            workspaceId: number | string,\n            taskIds: ReadonlyArray<number>\n          ) => TrackResponse<TaskV9[]>\n        }\n        timeEntries: {\n          export: (\n            workspaceId: number,\n            params: Partial<ReportsParams>,\n            kind: ReportsExport\n          ) => TrackResponse<ArrayBuffer | string>\n          fetch: (\n            workspaceId: number,\n            params: Partial<ReportsParams>\n          ) => TrackResponse<ReportsSearchTimeEntries>\n          totals: {\n            fetch: (\n              workspaceId: number,\n              params: Partial<ReportsParams>\n            ) => TrackResponse<ReportsSearchTotals>\n          }\n        }\n      }\n      summary: {\n        timeEntries: {\n          export: (\n            workspaceId: number,\n            params: Partial<ReportsParams>,\n            kind: ReportsExport\n          ) => TrackResponse<ArrayBuffer | string>\n          fetch: (\n            workspaceId: number,\n            params: Partial<ReportsParams>\n          ) => TrackResponse<ReportsSummary>\n        }\n      }\n      weekly: {\n        timeEntries: {\n          export: (\n            workspaceId: number,\n            params: Partial<ReportsParams>,\n            kind: ReportsExport\n          ) => TrackResponse<ArrayBuffer | string>\n          fetch: (\n            workspaceId: number,\n            params: Partial<ReportsParams>\n          ) => TrackResponse<WeeklyReportEntries>\n        }\n      }\n    }\n  }\n\n  sharedProject: {\n    createUser: (\n      hash: string,\n      name: string,\n      email: string\n    ) => TrackResponse<User>\n  }\n\n  sharedReport: {\n    exportReport: (\n      token: string,\n      extension: string,\n      params: SharedReportParams\n    ) => TrackResponse<ArrayBuffer | string>\n    fetch: (\n      token: string,\n      params: SharedReportParams\n    ) => TrackResponse<SharedReportApi>\n  }\n\n  signup: (signup: Signup) => TrackResponse<SignupUser>\n\n  smail: {\n    contact: (contact: ContactRequest) => TrackResponse<void>\n    demo: (demo: DemoRequest) => TrackResponse<void>\n    master: (master: MasterRequest) => TrackResponse<void>\n    meet: (meet: MeetRequest) => TrackResponse<void>\n  }\n\n  status: () => TrackResponse<void>\n\n  tag: {\n    create: (name: string, workspaceId: number) => TrackResponse<Tag>\n    delete: (tag: TagServer) => TrackResponse<void>\n    deleteBulk: (workspaceId: number, tagIds: number[]) => TrackResponse<void>\n    update: (tag: TagServer) => TrackResponse<Tag>\n  }\n\n  tasks: {\n    bulkEdit: (\n      workspaceId: number,\n      projectId: number,\n      taskIds: ReadonlyArray<number>,\n      operations: ReadonlyArray<BulkEditOperation>\n    ) => TrackResponse<BulkEditResponse>\n    create: (\n      workspaceId: number,\n      projectId: number,\n      task: Partial<TaskV9>\n    ) => TrackResponse<TaskV9>\n    delete: (\n      workspaceId: number,\n      projectId: number,\n      taskId: number\n    ) => TrackResponse<void>\n    fetch: (\n      workspaceId: number,\n      params: FetchTasksParams\n    ) => TrackResponse<FetchTasksData>\n    update: (\n      workspaceId: number,\n      projectId: number,\n      taskId: number,\n      changes: Partial<TaskV9>\n    ) => TrackResponse<TaskV9>\n  }\n\n  timeEntry: {\n    bulkEdit: (\n      timeEntryIds: ReadonlyArray<string>,\n      operations: ReadonlyArray<BulkEditOperation>\n    ) => TrackResponse<BulkEditResponse>\n    create: (\n      timeEntry: TimeEntryParams,\n      meta: boolean\n    ) => TrackResponse<TimeEntryV9>\n    delete: (timeEntry: TimeEntryV9) => TrackResponse<number>\n    get: (id: string) => TrackResponse<TimeEntryV9>\n    undoDelete: (\n      timeEntryIds: ReadonlyArray<string>\n    ) => TrackResponse<BulkEditResponse>\n    update: (\n      timeEntryParam: TimeEntryV9,\n      meta?: boolean,\n      query?: { include_sharing?: boolean; meta?: boolean }\n    ) => TrackResponse<TimeEntryV9>\n  }\n\n  timeline: (\n    startDate: number,\n    endDate: number\n  ) => TrackResponse<ReadonlyArray<TimelineEvent>>\n\n  timezones: {\n    fetch: () => TrackResponse<Timezones>\n    offsets: () => TrackResponse<TimezoneOffsets>\n  }\n\n  webhooks: {\n    create: (\n      workspaceId: WebhookSubscription['workspace_id'],\n      subscription: WebhookSubscriptionParameters\n    ) => TrackResponse<WebhookSubscription>\n    delete: (\n      workspaceId: WebhookSubscription['workspace_id'],\n      subscriptionId: WebhookSubscription['subscription_id']\n    ) => TrackResponse<WebhookSubscription>\n    fetch: (\n      workspaceId: WebhookSubscription['workspace_id']\n    ) => TrackResponse<ReadonlyArray<WebhookSubscription>>\n    ping: (\n      workspaceId: WebhookSubscription['workspace_id'],\n      subscriptionId: WebhookSubscription['subscription_id']\n    ) => TrackResponse<{ status: string }>\n    status: () => TrackResponse<{ status: string }>\n    toggle: (\n      workspaceId: WebhookSubscription['workspace_id'],\n      enabled: WebhookSubscription['enabled'],\n      subscriptionId: WebhookSubscription['subscription_id']\n    ) => TrackResponse<WebhookSubscription>\n    update: (\n      workspaceId: WebhookSubscription['workspace_id'],\n      subscriptionId: WebhookSubscription['subscription_id'],\n      subscription: WebhookSubscriptionParameters\n    ) => TrackResponse<WebhookSubscription>\n    fetchEventFilters: () => TrackResponse<{\n      [entity in WebhookSubscriptionEventFilter['entity']]: WebhookSubscriptionEventFilter['action'][]\n    }>\n    fetchEvents: (\n      workspaceId: WebhookSubscription['workspace_id'],\n      subscriptionId: WebhookSubscription['subscription_id']\n    ) => TrackResponse<{\n      events: ReadonlyArray<WebhookSubscriptionEvent>\n      total: number\n    }>\n  }\n\n  workspaces: {\n    alerts: {\n      create: (\n        alert: AlertCreationData,\n        workspaceId: number\n      ) => TrackResponse<WorkspaceAlert>\n      update: (alert: AlertUpdationData) => TrackResponse<WorkspaceAlert>\n      delete: (alertId: number, workspaceId: number) => TrackResponse<void>\n      fetch: (\n        workspaceId: number\n      ) => TrackResponse<ReadonlyArray<WorkspaceAlert>>\n    }\n    create: (workspace: Partial<WorkspacePayload>) => TrackResponse<Workspace>\n    currencies: {\n      fetch: (workspaceId: number) => TrackResponse<Currency>\n    }\n    dashboard: {\n      fetchActivityByTimeEntry: (\n        workspaceId: number,\n        since?: number\n      ) => TrackResponse<TeamsActivityTableState>\n      fetchActivityByUser: (\n        workspaceId: number,\n        since?: number\n      ) => TrackResponse<TeamsActivityTableState>\n      fetchMostActive: (\n        workspaceId: number,\n        since?: number\n      ) => TrackResponse<TeamsMostActiveState>\n    }\n    exports: {\n      start: (\n        workspaceId: number,\n        data: WorkspaceExportData\n      ) => TrackResponse<void>\n      status: (workspaceId: number) => TrackResponse<WorkspaceExport>\n    }\n    fetch: (workspaceId: number) => TrackResponse<Workspace>\n    groups: {\n      create: (workspaceId: number, name: string) => TrackResponse<Group>\n      delete: (workspaceId: number, groupId: number) => TrackResponse<void>\n      list: (workspaceId: number) => TrackResponse<ReadonlyArray<Group> | null>\n      update: (\n        workspaceId: number,\n        groupId: number,\n        name: string\n      ) => TrackResponse<void>\n    }\n    iCal: {\n      reset: (workspaceId: number) => TrackResponse<string>\n      set: (workspaceId: number, value: boolean) => TrackResponse<void>\n    }\n    linkedSsoProfiles: {\n      fetch: (workspaceId: number) => TrackResponse<LinkedSSOProfile[]>\n      create: (workspaceId: number, ssoProfileId: number) => TrackResponse<void>\n      delete: (workspaceId: number, ssoProfileId: number) => TrackResponse<void>\n    }\n    logo: {\n      fetch: (\n        workspaceId: number\n      ) => TrackResponse<{ logo: string | undefined }>\n      remove: (workspaceId: number) => TrackResponse<WorkspaceLogo>\n      upload: (\n        workspaceId: number,\n        formData: FormData\n      ) => TrackResponse<WorkspaceLogo>\n    }\n    preferences: {\n      fetch: (workspaceId: number) => TrackResponse<WorkspacePreferences>\n      update: (\n        workspaceId: number,\n        change: WorkspacePreferences\n      ) => TrackResponse<void>\n    }\n    paymentRecords: {\n      list: (workspaceId: number) => TrackResponse<ReadonlyArray<PaymentRecord>>\n    }\n    plans: {\n      list: (workspaceId: number) => TrackResponse<WorkspacePlans>\n    }\n    projects: {\n      fetch: (\n        workspaceId: number,\n        page: number,\n        since: Since,\n        filters?: { clientIds?: number[] }\n      ) => TrackResponse<Project[] | null>\n    }\n    rates: {\n      create: (\n        workspaceId: number,\n        rate: WorkspaceRatePayload\n      ) => TrackResponse<null>\n      delete: (workspaceId: number, rateId: number) => TrackResponse<void>\n      list: (\n        workspaceId: number,\n        level: 'workspace' | 'project' | 'user',\n        levelId: number\n      ) => TrackResponse<WorkspaceRate[]>\n    }\n    reminders: {\n      create: (\n        reminder: Partial<WorkspaceReminder>\n      ) => TrackResponse<WorkspaceReminder>\n      delete: (reminderId: number, workspaceId: number) => TrackResponse<void>\n      fetch: (\n        workspaceId: number\n      ) => TrackResponse<ReadonlyArray<WorkspaceReminder>>\n      update: (\n        reminder: Partial<WorkspaceReminder>\n      ) => TrackResponse<WorkspaceReminder>\n    }\n    reports: {\n      shared: {\n        create: (\n          workspaceId: number,\n          data: {\n            fixed_daterange: boolean\n            name: string\n            public: boolean\n            params: Partial<SavedReportParams>\n          }\n        ) => TrackResponse<SavedReport>\n        delete: (workspaceId: number, ids: number[]) => TrackResponse<void>\n        get: (\n          workspaceId: number,\n          search: {\n            fixed_dates?: boolean\n            public?: boolean\n            scheduled?: boolean\n            name?: string\n            page?: number\n            per_page?: number\n            sort_field: string\n            sort_direction: 'asc' | 'desc'\n          }\n        ) => TrackResponse<ReadonlyArray<SavedReport>>\n        update: (\n          workspaceId: number,\n          id: number,\n          data: {\n            name?: string\n            fixed_daterange?: boolean\n            public?: boolean\n            regenerate_token?: boolean\n          }\n        ) => TrackResponse<SavedReport>\n      }\n    }\n    scheduledReports: {\n      delete: (workspaceId: number, reportId: number) => TrackResponse<void>\n      fetch: (workspaceId: number) => TrackResponse<ScheduledReport[]>\n      save: (\n        workspaceId: number,\n        report: Omit<\n          ScheduledReport,\n          'creator_id' | 'created_at' | 'deleted_at' | 'report_id'\n        >\n      ) => TrackResponse<ScheduledReport>\n    }\n    sso: {\n      deleteConfig: (workspaceId: number) => TrackResponse<void>\n      fetchConfig: (workspaceId: number) => TrackResponse<WorkspaceSSOFetch>\n      updateConfig: (\n        workspaceId: number,\n        config: WorkspaceSSOConfig\n      ) => TrackResponse<WorkspaceSSOFetch>\n    }\n    subscription: {\n      acceptTermsOfService: (workspaceId: number) => TrackResponse<void>\n      acceptVat: (workspaceId: number) => TrackResponse<void>\n      calculate: (\n        workspaceId: number,\n        userCount: number,\n        period: number\n      ) => TrackResponse<WorkspaceSubscriptionCalculation>\n      fetchSelectedFeatures: (workspaceId: number) => TrackResponse<void>\n      get: (workspaceId: number) => TrackResponse<WorkspaceSubscription>\n      purchaseOrders: {\n        create: (workspaceId: number, userCount: number) => TrackResponse<void>\n      }\n      update: (\n        workspaceId: number,\n        data: {\n          pricing_plan_id: PricingPlan\n        }\n      ) => TrackResponse<WorkspaceSubscription>\n    }\n    tags: {\n      fetch: (\n        workspaceId: number,\n        page: number,\n        since: Since\n      ) => TrackResponse<Tag[] | null>\n    }\n    templates: {\n      fetch: (workspaceId: number | string) => TrackResponse<ProjectTemplate[]>\n    }\n    timeEntries: {\n      constraints: {\n        fetch: (workspaceId: number) => TrackResponse<TimeEntryConstraints>\n        update: (\n          workspaceId: number,\n          data: TimeEntryConstraints\n        ) => TrackResponse<void>\n      }\n      create: (timeEntry: TimeEntryRequest) => TrackResponse<TimeEntryV9>\n      delete: (\n        workspaceId: number,\n        timeEntryIds: ReadonlyArray<number>\n      ) => TrackResponse<void>\n      update: (timeEntry: TimeEntryV9) => TrackResponse<TimeEntryV9>\n    }\n    update: (\n      workspace: WithRateChangePayload<WorkspacePayload>\n    ) => TrackResponse<Workspace>\n    users: {\n      fetch: (workspaceId: number) => TrackResponse<ReadonlyArray<User>>\n      put: (\n        workspaceId: number,\n        userId: number,\n        data: Partial<CurrentUser>\n      ) => TrackResponse<void>\n      removeWorkspaceUser: (\n        workspaceId: number,\n        workspaceUserId: number\n      ) => TrackResponse<void>\n      updateWorkspaceUser: (\n        workspaceId: number,\n        userId: number,\n        data: Partial<WorkspaceUser | WithRateChangePayload<User>>\n      ) => TrackResponse<Partial<User>>\n    }\n    invoices: {\n      save: (invoice: ApiInvoice) => TrackResponse<ApiInvoice>\n      list: (\n        workspaceId: number,\n        page?: number\n      ) => TrackResponse<FetchInvoiceData>\n      delete: (workspaceId: number, invoiceId: number) => TrackResponse<void>\n    }\n  }\n}\n\nexport class API extends Base implements Endpoints {\n  accounts: Endpoints['accounts'] = {\n    closeAccount: {\n      track: (data) =>\n        this.post(\n          '/api/me/close_account/track',\n          {\n            body: JSON.stringify(data),\n            credentials: 'include',\n          },\n          'accounts'\n        ),\n    },\n    me: {\n      fetch: () => this.get('/api/me', { credentials: 'include' }, 'accounts'),\n      update: (data) =>\n        this.put(\n          '/api/me',\n          {\n            body: JSON.stringify(data),\n            credentials: 'include',\n          },\n          'accounts'\n        ),\n    },\n    sessions: {\n      check: () =>\n        this.get(\n          '/api/sessions',\n          { credentials: 'include' },\n\n          'accounts'\n        ),\n\n      login: (credentials) =>\n        this.post(\n          '/api/sessions',\n          {\n            body: JSON.stringify(credentials),\n            credentials: 'include',\n          },\n          'accounts'\n        ),\n      logout: (closeAllSessions = false) =>\n        this.delete(\n          '/api/sessions',\n          {\n            body: JSON.stringify({ close_all_sessions: closeAllSessions }),\n            credentials: 'include',\n          },\n          'accounts'\n        ),\n    },\n    signup: (signup) =>\n      this.post(\n        '/api/signup',\n        {\n          body: JSON.stringify(signup),\n          credentials: 'include',\n        },\n        'accounts'\n      ),\n    sso: {\n      profiles: {\n        fetch: () =>\n          this.get('/sso/api/profiles', { credentials: 'include' }, 'accounts'),\n      },\n    },\n  }\n\n  analytics: Endpoints['analytics'] = {\n    charts: {\n      create: (data) =>\n        this.post(`/analytics/api/charts`, {\n          body: JSON.stringify(data),\n        }),\n      list: (orgId) =>\n        this.get(`/analytics/api/charts?organization_id=${orgId}`),\n      fetch: (chartId) => this.get(`/analytics/api/charts/${chartId}`),\n      update: (chartId, changes) =>\n        this.patch(`/analytics/api/charts/${chartId}`, {\n          body: JSON.stringify(changes),\n        }),\n      delete: (chartId) => this.delete(`/analytics/api/charts/${chartId}`),\n      userOptions: {\n        update: (chartId, changes) =>\n          this.patch(`/analytics/api/charts/${chartId}/user_options`, {\n            body: JSON.stringify(changes),\n          }),\n      },\n      privileges: {\n        update: (chartId, permissions) =>\n          this.patch(`/analytics/api/charts/${chartId}/privileges`, {\n            body: JSON.stringify({ permissions }),\n          }),\n        delete: (chartId, permission) =>\n          this.delete(\n            `/analytics/api/charts/${chartId}/privileges/${permission.source}/${permission.id}`\n          ),\n      },\n      tokens: {\n        update: (chartId, changes) =>\n          this.patch(`/analytics/api/charts/${chartId}/tokens`, {\n            body: JSON.stringify(changes),\n          }),\n      },\n      dashboards: {\n        list: (chartId) =>\n          this.get(`/analytics/api/charts/${chartId}/dashboards`),\n      },\n    },\n    dashboards: {\n      create: (data) =>\n        this.post(`/analytics/api/dashboards`, {\n          body: JSON.stringify(data),\n        }),\n      list: (orgId) =>\n        this.get(`/analytics/api/dashboards?organization_id=${orgId}`),\n      fetch: (dashboardId) =>\n        this.get(`/analytics/api/dashboards/${dashboardId}`),\n      update: (dashboardId, changes) =>\n        this.patch(`/analytics/api/dashboards/${dashboardId}`, {\n          body: JSON.stringify(changes),\n        }),\n      delete: (dashboardId) =>\n        this.delete(`/analytics/api/dashboards/${dashboardId}`),\n      charts: {\n        fetch: (dashboardId) =>\n          this.get(`/analytics/api/dashboards/${dashboardId}/charts`),\n      },\n      userOptions: {\n        update: (dashboardId, changes) =>\n          this.patch(`/analytics/api/dashboards/${dashboardId}/user_options`, {\n            body: JSON.stringify(changes),\n          }),\n      },\n      privileges: {\n        update: (dashboardId, permissions) =>\n          this.patch(`/analytics/api/dashboards/${dashboardId}/privileges`, {\n            body: JSON.stringify({ permissions }),\n          }),\n        delete: (dashboardId, permission) =>\n          this.delete(\n            `/analytics/api/dashboards/${dashboardId}/privileges/${permission.source}/${permission.id}`\n          ),\n      },\n      tokens: {\n        update: (dashboardId, changes) =>\n          this.patch(`/analytics/api/dashboards/${dashboardId}/tokens`, {\n            body: JSON.stringify(changes),\n          }),\n      },\n    },\n    exports: {\n      chart: (descriptor, kind, useToken) =>\n        this.post(\n          `exports/api/v1/chart.${kind}${parametrize({\n            useToken: useToken ? true : undefined,\n          })}`,\n          {\n            body: JSON.stringify(descriptor),\n          }\n        ),\n      dashboard: (descriptor, kind, useToken) =>\n        this.post(\n          `exports/api/v1/dashboard.${kind}${parametrize({\n            useToken: useToken ? true : undefined,\n          })}`,\n          {\n            body: JSON.stringify(descriptor),\n          }\n        ),\n    },\n    shared: {\n      fetch: (token) => this.get(`/analytics/api/shared/${token}`),\n    },\n  }\n\n  approvals: Endpoints['approvals'] = {\n    timesheetSetup: {\n      list: (wid: number, filters: TimesheetSetupAPIFilters) => {\n        const params = parametrize(filters)\n        return this.get(`/api/v9/workspaces/${wid}/timesheet_setups${params}`)\n      },\n      update: (\n        wid: number,\n        setupId: number,\n        updateFields: Partial<TimesheetSetup>\n      ) => {\n        return this.put(\n          `/api/v9/workspaces/${wid}/timesheet_setups/${setupId}`,\n          { body: JSON.stringify(updateFields) }\n        )\n      },\n      create: (wid: number, data: TimesheetSetupCreation) => {\n        return this.post(`/api/v9/workspaces/${wid}/timesheet_setups`, {\n          body: JSON.stringify(data),\n        })\n      },\n      delete: (wid: number, timesheetSetupId: number) => {\n        return this.delete(\n          `/api/v9/workspaces/${wid}/timesheet_setups/${timesheetSetupId}`\n        )\n      },\n    },\n    timesheet: {\n      list: (wid: number, filters: TimesheetListAPIFilters) => {\n        const params = parametrize(filters)\n        return this.get(`/api/v9/workspaces/${wid}/timesheets${params}`)\n      },\n      hours: (\n        wid: number,\n        data: Pick<Timesheet, 'timesheet_setup_id' | 'start_date'>[]\n      ) => {\n        return this.post(`/api/v9/workspaces/${wid}/timesheets/hours`, {\n          body: JSON.stringify(data),\n        })\n      },\n      update: (\n        wid: number,\n        setupId: number,\n        startDate: string,\n        data: Pick<Timesheet, 'rejection_comment' | 'status'>\n      ) => {\n        return this.put(\n          `/api/v9/workspaces/${wid}/timesheets/${setupId}/${startDate}`,\n          {\n            body: JSON.stringify(data),\n          }\n        )\n      },\n      timeEntries: (\n        wid: number,\n        setupId: number,\n        startDate: string\n      ): TrackResponse<TimeEntry[]> => {\n        return this.get(\n          `/api/v9/workspaces/${wid}/timesheets/${setupId}/${startDate}/time_entries`\n        )\n      },\n    },\n  }\n\n  auth: Endpoints['auth'] = {\n    saml2login: ({ email, client }) =>\n      this.get(`/api/v9/auth/saml2/login?email=${email}&client=${client}`),\n  }\n\n  avatar: Endpoints['avatar'] = {\n    gravatar: () =>\n      this.post('/api/v9/avatars/use_gravatar', { body: JSON.stringify({}) }),\n    remove: () => this.delete('/api/v9/avatars'),\n    upload: (file: File) => {\n      const formData = new FormData()\n      formData.append('file', file)\n      return this.post('/api/v9/avatars', { body: formData })\n    },\n  }\n\n  calendar: Endpoints['calendar'] = {\n    deleteCalendarIntegration: (integrationId) =>\n      this.delete(`/api/v9/integrations/calendar/${integrationId}`),\n    fetchCalendarIntegrationCalendars: (\n      integrationId: number,\n      selectedOnly: boolean,\n      pageToken?: string\n    ) => {\n      const params: { selected_only: string; page_token?: string } = {\n        selected_only: selectedOnly.toString(),\n      }\n      if (pageToken) {\n        params.page_token = pageToken\n      }\n      const paramsString = '?' + new URLSearchParams(params)\n      return this.get(\n        `/api/v9/integrations/calendar/${integrationId}/calendars${paramsString}`\n      )\n    },\n    fetchCalendarIntegrations: () => this.get('/api/v9/integrations/calendar'),\n    fetchCalendarIntegrationEvents: (startDate, endDate, pageToken) => {\n      const params: {\n        start_date: string\n        end_date: string\n        page_token?: string\n      } = {\n        start_date: startDate,\n        end_date: endDate,\n      }\n      if (pageToken) {\n        params.page_token = pageToken\n      }\n      const paramsString = '?' + new URLSearchParams(params)\n      return this.get(`/api/v9/integrations/calendar/events${paramsString}`)\n    },\n    getEventDetailsSuggestion: (eventId) =>\n      this.get(\n        `/api/v9/integrations/calendar/events/${eventId}/details-suggestion`\n      ),\n    refreshCalendarList: (integrationId) =>\n      this.post(\n        `/api/v9/integrations/calendar/${integrationId}/calendars/update`\n      ),\n    refreshEvents: () =>\n      this.post(`/api/v9/integrations/calendar/events/update`),\n    updateCalendar: (integrationId, calendarId, changes) => {\n      return this.patch(\n        `/api/v9/integrations/calendar/${integrationId}/calendars/${calendarId}`,\n        { body: JSON.stringify(changes) }\n      )\n    },\n    getBulkEventDetailsSuggestion: (events) =>\n      this.post('/api/v9/integrations/calendar/events/details-suggestion', {\n        body: JSON.stringify(events),\n      }),\n  }\n\n  client: Endpoints['client'] = {\n    archive: (client) =>\n      this.post(\n        `/api/v9/workspaces/${client.wid}/clients/${client.id}/archive`\n      ),\n    create: (client) =>\n      this.getPermissions().then((permissions) =>\n        this.post(`/api/v9/workspaces/${client.wid}/clients`, {\n          body: JSON.stringify(client),\n          ...useCustomHeaders([() => withPermissions(permissions)]),\n        })\n      ),\n    delete: (client) =>\n      this.delete(`/api/v9/workspaces/${client.wid}/clients/${client.id}`),\n    fetch: (workspaceId, filter) => {\n      const status =\n        filter?.active === 'both'\n          ? 'both'\n          : filter?.active === true\n          ? 'active'\n          : filter?.active === false\n          ? 'archived'\n          : 'active'\n\n      const searchParams: {\n        name?: string\n        status: string\n      } = {\n        status,\n      }\n\n      // this is necessary, otherwise URLSearchParams contrives\n      // name to 'undefined' if no name is provided\n      if (filter?.name) {\n        searchParams.name = filter.name\n      }\n\n      const params = new URLSearchParams(searchParams)\n\n      return this.getPermissions().then((permissions) => {\n        return this.get(\n          `/api/v9/workspaces/${workspaceId}/clients?${params.toString()}`,\n          useCustomHeaders([() => withPermissions(permissions)])\n        )\n      })\n    },\n    restore: (client, projects) =>\n      this.getPermissions().then((permissions) =>\n        this.post(\n          `/api/v9/workspaces/${client.wid}/clients/${client.id}/restore`,\n          {\n            body: JSON.stringify(\n              projects === 'all' ? { restore_all_projects: true } : { projects }\n            ),\n            ...useCustomHeaders([() => withPermissions(permissions)]),\n          }\n        )\n      ),\n    update: (client) =>\n      this.getPermissions().then((permissions) =>\n        this.put(`/api/v9/workspaces/${client.wid}/clients/${client.id}`, {\n          body: JSON.stringify(client),\n          ...useCustomHeaders([() => withPermissions(permissions)]),\n        })\n      ),\n  }\n\n  countries: Endpoints['countries'] = {\n    fetch: () => this.get('/api/v9/countries'),\n    fetchStates: (countryId) =>\n      this.get(`/api/v9/countries/${countryId}/subdivisions`),\n  }\n\n  csv: Endpoints['csv'] = {\n    import: (data) => {\n      const formData = new FormData()\n      formData.append('upload_id', '' + data.uploadId)\n      formData.append('api_token', data.apiToken)\n      formData.append('workspace_id', '' + data.workspaceId)\n      formData.append('toggl_new', 'true')\n      if (data.sendInvites) {\n        formData.append('send_invites', '1')\n      }\n      return this.post('/api/csv/import', { body: formData })\n    },\n    status: (data) => {\n      const formData = new FormData()\n      formData.append('upload_id', '' + data.uploadId)\n      formData.append('api_token', data.apiToken)\n      formData.append('workspace_id', '' + data.workspaceId)\n      formData.append('toggl_new', 'true')\n      return this.post('/api/csv/status', { body: formData })\n    },\n    validate: (data) => {\n      const formData = new FormData()\n      formData.append('filedata', data.file)\n      formData.append('api_token', data.apiToken)\n      formData.append('workspace_id', '' + data.workspaceId)\n      formData.append('toggl_new', 'true')\n      return this.post('/api/csv/validate', { body: formData })\n    },\n  }\n\n  currencies: Endpoints['currencies'] = () => this.get('/api/v9/currencies')\n\n  feedback: Endpoints['feedback'] = {\n    send: (data) => {\n      const formData = new FormData()\n      if (data.subject) {\n        formData.append('subject', data.subject)\n      }\n      formData.append('details', data.details)\n      formData.append('date', data.date)\n      formData.append('toggl_version', data.toggl_version)\n      return this.post('/api/v9/feedback/web', { body: formData })\n    },\n  }\n\n  flags: Endpoints['flags'] = {\n    change: (flags: Flags) =>\n      this.post('/api/v9/me/flags', { body: JSON.stringify(flags) }),\n    fetch: () => this.get('/api/v9/me/flags'),\n  }\n\n  insights: Endpoints['insights'] = {\n    workspace: {\n      dataTrends: {\n        projects: (workspaceId, options) =>\n          this.post(\n            `/insights/api/v1/workspace/${workspaceId}/data_trends/projects`,\n            { body: JSON.stringify(options) }\n          ),\n      },\n      profitability: {\n        employeesExport: (workspaceId, options, extension) =>\n          this.post(\n            `insights/api/v1/workspace/${workspaceId}/profitability/employees.${extension}`,\n            { body: JSON.stringify(options) }\n          ),\n        projectsExport: (workspaceId, options, extension) =>\n          this.post(\n            `insights/api/v1/workspace/${workspaceId}/profitability/projects.${extension}`,\n            { body: JSON.stringify(options) }\n          ),\n      },\n      trends: {\n        projectsExport: (workspaceId, options, extension) =>\n          this.post(\n            `/insights/api/v1/workspace/${workspaceId}/trends/projects.${extension}`,\n            { body: JSON.stringify(options) }\n          ),\n      },\n    },\n  }\n\n  integrations: Endpoints['integrations'] = {\n    authService: (workspaceId, service, redirectUrl) =>\n      this.post(`/integrations/api/v2/auth/${workspaceId}/${service}`, {\n        body: JSON.stringify({ redirect_url: redirectUrl }),\n        credentials: 'include',\n      }),\n    createConfiguration: (\n      workspaceId: number,\n      service: IntegrationsService,\n      configuration: SalesforceConfiguration | Jira2Configuration,\n      enabled: boolean\n    ) =>\n      this.post(`/integrations/api/v2/services/${workspaceId}/${service}`, {\n        body: JSON.stringify({\n          enabled,\n          configuration,\n        }),\n      }),\n    deleteConfiguration: (workspaceId: number, service: IntegrationsService) =>\n      this.delete(`/integrations/api/v2/services/${workspaceId}/${service}`),\n    getIntegrations: (workspaceId: number) =>\n      this.get(`/integrations/api/v2/services/${workspaceId}`),\n    removeAuthService: (workspaceId, service) =>\n      this.delete(`/integrations/api/v2/auth/${workspaceId}/${service}`),\n    setServiceEnabled: (\n      workspaceId: number,\n      service: IntegrationsService,\n      enabled: boolean\n    ) =>\n      this.patch(`/integrations/api/v2/services/${workspaceId}/${service}`, {\n        body: JSON.stringify({\n          enabled,\n        }),\n      }),\n    sync: (workspaceId: number, service: IntegrationsService) =>\n      this.post(`/integrations/api/v2/sync/${workspaceId}/${service}`),\n    updateConfiguration: (\n      workspaceId: number,\n      service: IntegrationsService,\n      configuration: SalesforceConfiguration | Jira2Configuration,\n      enabled: boolean\n    ) =>\n      this.put(`/integrations/api/v2/services/${workspaceId}/${service}`, {\n        body: JSON.stringify({\n          enabled,\n          configuration,\n        }),\n      }),\n    validateJira2Filtering: (workspaceId, jira_active_site, filtering_data) =>\n      this.post(`/integrations/api/v2/services/${workspaceId}/jira2/validate`, {\n        body: JSON.stringify({\n          ...filtering_data,\n          jira_active_site,\n        }),\n      }),\n    getQuickBooksCustomers: (workspaceId) =>\n      this.get(\n        `/integrations/api/v2/services/${workspaceId}/quickbooks/customers`\n      ),\n    submitInvoiceToQuickBooks: (workspaceId, invoiceData) =>\n      this.post(\n        `/integrations/api/v2/services/${workspaceId}/quickbooks/invoices`,\n        {\n          body: JSON.stringify(invoiceData),\n        }\n      ),\n  }\n\n  invitations: Endpoints['invitations'] = {\n    invitation: (code) => this.get(`/api/v9/invitations/${code}`),\n  }\n\n  location: Endpoints['location'] = () => this.get('/api/v9/me/location')\n\n  me: Endpoints['me'] = {\n    acceptTermsOfService: () => this.post('/api/v9/me/accept_tos'),\n    changePassword: (currentPassword, newPassword) =>\n      this.put('/api/v9/me', {\n        body: JSON.stringify({\n          current_password: currentPassword,\n          password: newPassword,\n        }),\n      }),\n    clients: {\n      list: (since) =>\n        this.getPermissions().then((permissions) => {\n          return this.get(\n            `/api/v9/me/clients${since ? `?since=${since}` : ''}`,\n            useCustomHeaders([() => withPermissions(permissions)])\n          )\n        }),\n    },\n    closeAccount: (data) =>\n      this.post('/api/v9/me/close_account', {\n        body: JSON.stringify(data),\n      }),\n    disableOAuth: {\n      apple: () =>\n        this.post('/api/v9/me/enable_oauth/apple', {\n          body: JSON.stringify({\n            enabled: false,\n          }),\n        }),\n      google: () =>\n        this.post('/api/v9/me/enable_oauth/google', {\n          body: JSON.stringify({\n            enabled: false,\n          }),\n        }),\n    },\n    enableOAuth: {\n      apple: (token) =>\n        this.post('/api/v9/me/enable_oauth/apple', {\n          body: JSON.stringify({\n            enabled: true,\n            token,\n          }),\n        }),\n      google: (code) =>\n        this.post('/api/v9/me/enable_oauth/google', {\n          body: JSON.stringify({\n            enabled: true,\n            code,\n          }),\n        }),\n    },\n    enableSso: (ssoEnable) =>\n      this.post('/api/v9/me/enable_sso', {\n        body: JSON.stringify(ssoEnable),\n      }),\n    export: {\n      create: (data) =>\n        this.post('/api/v9/me/export', { body: JSON.stringify(data) }),\n      get: () => this.get('/api/v9/me/export'),\n    },\n    favorites: {\n      create: (data, meta = false) =>\n        this.post(`/api/v9/me/favorites${meta ? '?meta=true' : ''}`, {\n          body: JSON.stringify(data),\n        }),\n      update: (data, meta = false) =>\n        this.put(`/api/v9/me/favorites${meta ? '?meta=true' : ''}`, {\n          body: JSON.stringify(data),\n        }),\n      delete: (favoriteId) => this.delete(`/api/v9/me/favorites/${favoriteId}`),\n      list: (meta = false) =>\n        this.getPermissions().then((permissions) => {\n          return this.get(\n            `/api/v9/me/favorites${meta ? '?meta=true' : ''}`,\n            useCustomHeaders([() => withPermissions(permissions)])\n          )\n        }),\n      suggestions: () => this.post('/api/v9/me/favorites/suggestions'),\n    },\n    features: {\n      list: () => this.get('/api/v9/me/features'),\n      organization: {\n        list: () => this.get('/api/v9/me/features?for_organization=true'),\n      },\n    },\n    get: () => this.get('/api/v9/me'),\n    login: (login) =>\n      this.post('/api/v9/me/sessions', {\n        headers: {\n          Authorization: `Basic ${btoa(\n            unescape(\n              encodeURIComponent(\n                'email' in login\n                  ? `${login.email}:${login.password}`\n                  : 'apiToken' in login\n                  ? `${login.apiToken}:api_token`\n                  : 'code' in login\n                  ? `${login.code}:${login.method}`\n                  : 'token' in login\n                  ? `${login.token}:${login.method}`\n                  : ''\n              )\n            )\n          )}`,\n        },\n        body: JSON.stringify({ remember_me: true }),\n      }),\n    logout: () => this.delete('/api/v9/me/sessions'),\n    lostPasswords: (lostPassword) =>\n      this.post('/api/v9/me/lost_passwords', {\n        body: JSON.stringify(lostPassword),\n      }),\n    lostPasswordsToken: (token) =>\n      this.get(`/api/v9/me/lost_passwords/${token}`),\n    lostPasswordsNewPassword: (password) =>\n      this.post('/api/v9/me/lost_passwords/confirm', {\n        body: JSON.stringify(password),\n      }),\n    notifications: {\n      delete: (id) =>\n        this.put(`api/v9/me/notifications/${id}/seen`, {\n          body: JSON.stringify({}),\n        }),\n      list: () => this.get('/api/v9/me/notifications'),\n    },\n    organizations: {\n      list: () =>\n        this.getPermissions().then((permissions) => {\n          return this.get(\n            `/api/v9/me/organizations`,\n            useCustomHeaders([() => withPermissions(permissions)])\n          )\n        }),\n    },\n    preferences: {\n      fetch: () => this.get('/api/v9/me/preferences/web'),\n      update: (updatedPreferences) =>\n        this.post('/api/v9/me/preferences/web', {\n          body: JSON.stringify(updatedPreferences),\n        }),\n    },\n    projects: {\n      list: (since) =>\n        this.getPermissions().then((permissions) => {\n          return this.get(\n            `/api/v9/me/projects${since ? `?since=${since}` : ''}`,\n            useCustomHeaders([() => withPermissions(permissions)])\n          )\n        }),\n    },\n    reminders: {\n      list: () =>\n        this.getPermissions().then((permissions) => {\n          return this.get(\n            '/api/v9/me/track_reminders',\n            useCustomHeaders([() => withPermissions(permissions)])\n          )\n        }),\n    },\n    resetToken: () => this.post('/api/v9/me/reset_token'),\n    tags: {\n      list: (since) =>\n        this.getPermissions().then((permissions) => {\n          return this.get(\n            `/api/v9/me/tags${since ? `?since=${since}` : ''}`,\n            useCustomHeaders([() => withPermissions(permissions)])\n          )\n        }),\n    },\n    tasks: {\n      list: (since, meta) => {\n        const urlParams = parametrize({\n          since,\n          meta,\n        })\n\n        return this.getPermissions().then((permissions) => {\n          return this.get(\n            `/api/v9/me/tasks${urlParams}`,\n            useCustomHeaders([() => withPermissions(permissions)])\n          )\n        })\n      },\n    },\n    timeEntries: {\n      current: () =>\n        this.getPermissions().then((permissions) => {\n          return this.get(\n            '/api/v9/me/time_entries/current',\n            useCustomHeaders([() => withPermissions(permissions)])\n          )\n        }),\n      fetch: (startDate, stopDate, meta = false, include_sharing = false) => {\n        let data\n        if (startDate && stopDate) {\n          data = {\n            end_date: new Date(stopDate).toISOString().substring(0, 10),\n            start_date: new Date(startDate).toISOString().substring(0, 10),\n          }\n        } else {\n          data = stopDate\n            ? { before: new Date(stopDate).toISOString().substring(0, 10) }\n            : {\n                since: startDate\n                  ? Math.floor(new Date(startDate).getTime() / 1000).toString()\n                  : '',\n              }\n        }\n        const param = parametrize({ ...data, meta, include_sharing })\n\n        return this.getPermissions().then((permissions) => {\n          return this.get(\n            `/api/v9/me/time_entries${param}`,\n            useCustomHeaders([() => withPermissions(permissions)])\n          )\n        })\n      },\n      list: (since, meta = false) =>\n        this.getPermissions().then((permissions) => {\n          return this.get(\n            `/api/v9/me/time_entries${parametrize({ since, meta })}`,\n            useCustomHeaders([() => withPermissions(permissions)])\n          )\n        }),\n    },\n    timeEntryInvitations: {\n      fetch: (since) => {\n        return this.get(\n          `/api/v9/me/time_entry_invitations${parametrize({ since })}`\n        )\n      },\n      accept: (workspaceId, invitationId) =>\n        this.post(\n          `/api/v9/workspaces/${workspaceId}/time_entry_invitations/${invitationId}/accept`\n        ),\n      reject: (workspaceId, invitationId) =>\n        this.post(\n          `/api/v9/workspaces/${workspaceId}/time_entry_invitations/${invitationId}/reject`\n        ),\n    },\n    timesheets: {\n      list: (filters) =>\n        this.getPermissions().then((permissions) => {\n          return this.get(\n            `/api/v9/me/timesheets${filters ? `?${parametrize(filters)}` : ''}`,\n            useCustomHeaders([() => withPermissions(permissions)])\n          )\n        }),\n    },\n    unsubscribe: ({ code, unsubType }) =>\n      this.post(`/api/v9/me/${unsubType}/${code}`),\n    update: (updatedUser) =>\n      this.put('/api/v9/me', { body: JSON.stringify(updatedUser) }),\n    workspaces: {\n      list: (since) =>\n        this.getPermissions().then((permissions) => {\n          return this.get(\n            `/api/v9/me/workspaces${since ? `?since=${since}` : ''}`,\n            useCustomHeaders([() => withPermissions(permissions)])\n          )\n        }),\n    },\n  }\n\n  oauth: Endpoints['oauth'] = {\n    appleCallback: (data) => {\n      const formData = new FormData()\n      formData.set('code', data.authorization.code)\n      formData.set('id_token', data.authorization.id_token)\n      formData.set('user', JSON.stringify(data.user))\n      return this.post('/api/v9/oauth/apple/callback', { body: formData })\n    },\n    oauthUrl: (state) => this.get(`/api/v9/oauth_url?state=${state}`),\n  }\n\n  organization: Endpoints['organization'] = {\n    create: (organizationName, workspaceName) =>\n      this.getPermissions().then((permissions) =>\n        this.post('/api/v9/organizations', {\n          body: JSON.stringify({\n            name: organizationName,\n            workspace_name: workspaceName ?? organizationName,\n          }),\n          ...useCustomHeaders([() => withPermissions(permissions)]),\n        })\n      ),\n    customer: {\n      get: (organizationId) =>\n        this.get(`/api/v9/organizations/${organizationId}/customer`),\n      saveContactDetails: (organizationId, contactDetails) =>\n        this.post(\n          `/api/v9/organizations/${organizationId}/customer/contact_detail`,\n          { body: JSON.stringify(contactDetails) }\n        ),\n    },\n    get: (organizationId) =>\n      this.getPermissions().then((permissions) =>\n        this.get(\n          `/api/v9/organizations/${organizationId}`,\n          useCustomHeaders([() => withPermissions(permissions)])\n        )\n      ),\n    groups: {\n      create: (organizationId: number, group: OrganizationGroupPayload) =>\n        this.post(`/api/v9/organizations/${organizationId}/groups`, {\n          body: JSON.stringify(group),\n        }),\n      delete: (organizationId, organizationGroupId) =>\n        this.delete(\n          `/api/v9/organizations/${organizationId}/groups/${organizationGroupId}`\n        ),\n      list: (organizationId) => {\n        return this.get(`/api/v9/organizations/${organizationId}/groups`)\n      },\n      update: (organizationId, organizationGroupId, group) =>\n        this.put(\n          `/api/v9/organizations/${organizationId}/groups/${organizationGroupId}`,\n          {\n            body: JSON.stringify(group),\n            // WARNING: this is added to handle huge organizations\n            headers: { deferred: 'true' },\n          }\n        ),\n    },\n    metrics: {\n      fetch: (organizationId) =>\n        this.get(`/api/v9/organizations/${organizationId}/metrics`),\n    },\n    paymentRecords: {\n      list: (organizationId) =>\n        this.get(`/api/v9/organizations/${organizationId}/payment_records`),\n    },\n    plans: {\n      list: (organizationId) =>\n        this.get(`/api/v9/organizations/${organizationId}/plans`),\n    },\n    segmentation: {\n      list: (organizationId) =>\n        this.get(`/api/v9/organizations/${organizationId}/segmentation`),\n      update: (organizationId, segmentation) =>\n        this.put(`/api/v9/organizations/${organizationId}/segmentation`, {\n          body: JSON.stringify(segmentation),\n        }),\n    },\n    saveFeedback: (\n      organizationId: number,\n      pricingPlanId: number,\n      data: {\n        comment: string\n        selections: ReadonlyArray<{ [index: string]: string }>\n      }\n    ) =>\n      this.post(\n        `/api/v9/organizations/${organizationId}/pricing_plans/${pricingPlanId}/feedback`,\n        { body: JSON.stringify(data) }\n      ),\n    update: (organizationId, organization) =>\n      this.getPermissions().then((permissions) =>\n        this.put(`/api/v9/organizations/${organizationId}`, {\n          body: JSON.stringify(organization),\n          ...useCustomHeaders([() => withPermissions(permissions)]),\n        })\n      ),\n    users: {\n      delete: (organizationId, organizationUserIds) =>\n        this.patch(`/api/v9/organizations/${organizationId}/users`, {\n          body: JSON.stringify({\n            delete: organizationUserIds,\n          }),\n          headers: { deferred: 'true' },\n        }),\n      leave: (organizationId) =>\n        this.delete(`/api/v9/organizations/${organizationId}/users/leave`),\n      list: (organizationId, options) => {\n        const urlParams = parametrize({\n          sort_dir: options.name,\n          page: options.page,\n          only_admins: options.only_admins,\n          active_status: options.active_status,\n          roles: options.roles,\n          groups: (options.groups || []).join(','),\n          workspaces: (options.workspaces || []).join(','),\n          filter: options.filter || '',\n        })\n        return this.get(\n          `/api/v9/organizations/${organizationId}/users${urlParams}`\n        )\n      },\n      update: (organizationId, organizationUserId, organizationUser) =>\n        this.put(\n          `/api/v9/organizations/${organizationId}/users/${organizationUserId}`,\n          {\n            body: JSON.stringify(organizationUser),\n          }\n        ),\n      detailed: (organizationId, options) => {\n        const urlParams = parametrize({\n          sort_dir: options.name,\n          page: options.page,\n          active_status: options.active_status,\n          only_admins: options.only_admins,\n          roles: (options.roles || []).join(','),\n          groups: (options.groups || []).join(','),\n          workspaces: (options.workspaces || []).join(','),\n          filter: options.filter || '',\n          user_ids: (options.user_ids || []).join(','),\n        })\n\n        return this.get(\n          `/api/v9/organizations/${organizationId}/users/detailed${urlParams}`\n        )\n      },\n    },\n    workspaces: {\n      addAssignments: (\n        organizationId,\n        workspaceId,\n        data: WorkspaceAssignmentPayload\n      ) =>\n        this.put(\n          `/api/v9/organizations/${organizationId}/workspaces/${workspaceId}/assignments`,\n          { body: JSON.stringify(data) }\n        ),\n      create: (organizationId, workspace) =>\n        this.getPermissions().then((permissions) =>\n          this.post(`/api/v9/organizations/${organizationId}/workspaces`, {\n            body: JSON.stringify(workspace),\n            ...useCustomHeaders([() => withPermissions(permissions)]),\n          })\n        ),\n      groups: {\n        list: (organizationId, workspaceId) =>\n          this.get(\n            `/api/v9/organizations/${organizationId}/workspaces/${workspaceId}/groups`\n          ),\n      },\n      leave: (organizationId, workspaceId, workspaceUsersIds) =>\n        this.patch(\n          `/api/v9/organizations/${organizationId}/workspaces/${workspaceId}/workspace_users`,\n          {\n            body: JSON.stringify({\n              delete: workspaceUsersIds,\n            }),\n          }\n        ),\n      statistics: (organizationId: number) =>\n        this.get(\n          `/api/v9/organizations/${organizationId}/workspaces/statistics`\n        ),\n      users: {\n        list: (organizationId, workspaceId, filters = {}) => {\n          const urlParams = parametrize(filters)\n          return this.get(\n            `/api/v9/organizations/${organizationId}/workspaces/${workspaceId}/workspace_users${urlParams}`\n          )\n        },\n      },\n    },\n    owner: {\n      createTransfer: (organizationId: number, newOwnerId: number) =>\n        this.post(`/api/v9/organizations/${organizationId}/owner/transfer`, {\n          body: JSON.stringify({ new_owner_id: newOwnerId }),\n        }),\n      get: (organizationId: number) =>\n        this.get(`/api/v9/organizations/${organizationId}/owner`),\n      getTransfers: (organizationId, ongoing = false) =>\n        this.get(\n          `/api/v9/organizations/${organizationId}/owner/transfer?ongoing=${ongoing}`\n        ),\n      updateTransfer: (organizationId, transferId, action) =>\n        this.post(\n          `/api/v9/organizations/${organizationId}/owner/transfer/${transferId}/${action}`\n        ),\n    },\n    subscription: {\n      delete: (organizationId, immediateCancel) =>\n        this.delete(\n          `/api/v9/organizations/${organizationId}/subscription${\n            immediateCancel ? '?immediateCancel=true' : ''\n          }`\n        ),\n      get: (organizationId) =>\n        this.get(`/api/v9/organizations/${organizationId}/subscription`),\n      calculate: (organizationId, userCount, period = 12) =>\n        this.post(\n          `/api/v9/organizations/${organizationId}/subscription/calculate`,\n          {\n            body: JSON.stringify({\n              user_count: userCount,\n              period,\n            }),\n          }\n        ),\n      purchaseOrders: {\n        create: (organizationId: number, userCount: number) =>\n          this.post(\n            `/api/v9/organizations/${organizationId}/subscription/purchase_orders`,\n            {\n              body: JSON.stringify({\n                user_count: userCount,\n              }),\n            }\n          ),\n      },\n      update: (organizationId, changes) =>\n        this.post(`/api/v9/organizations/${organizationId}/subscription`, {\n          body: JSON.stringify(changes),\n        }),\n    },\n    subscriptionNext: {\n      get: (organizationId) =>\n        this.get(`/api/v9/organizations/${organizationId}/subscription`),\n      create: (organizationId, priceTag) =>\n        this.post(`/api/v9/organizations/${organizationId}/subscription`, {\n          body: JSON.stringify({\n            pricing_plan_tag: priceTag,\n          }),\n        }),\n      update: (organizationId, priceTag) =>\n        this.put(`/api/v9/organizations/${organizationId}/subscription`, {\n          body: JSON.stringify({\n            pricing_plan_tag: priceTag,\n          }),\n        }),\n      createSetupIntent: (organizationId) => {\n        return this.post(\n          `/api/v9/organizations/${organizationId}/subscription/setup_intent`\n        )\n      },\n      customer: {\n        get: (organizationId) =>\n          this.get(\n            `/api/v9/organizations/${organizationId}/subscription/customer`\n          ),\n        create: (\n          organizationId,\n          name,\n          email,\n          postalCode,\n          country,\n          state,\n          taxNumber,\n          address\n        ) =>\n          this.post(\n            `/api/v9/organizations/${organizationId}/subscription/customer`,\n            {\n              body: JSON.stringify({\n                customer_name: name,\n                toggl_user_email: email,\n                postal_code: postalCode,\n                country_code: country,\n                state,\n                tax_number: taxNumber,\n                address_line: address,\n              }),\n            }\n          ),\n        update: (\n          organizationId,\n          name,\n          email,\n          postalCode,\n          country,\n          state,\n          taxNumber,\n          address\n        ) =>\n          this.put(\n            `/api/v9/organizations/${organizationId}/subscription/customer`,\n            {\n              body: JSON.stringify({\n                customer_name: name,\n                toggl_user_email: email,\n                postal_code: postalCode,\n                country_code: country,\n                state,\n                tax_number: taxNumber,\n                address_line: address,\n              }),\n            }\n          ),\n      },\n      promoCode: {\n        apply: (organizationId, promoCode) => {\n          return this.post(\n            `/api/v9/organizations/${organizationId}/subscription/promocode`,\n            {\n              body: JSON.stringify({\n                code: promoCode,\n              }),\n            }\n          )\n        },\n        delete: (organizationId) =>\n          this.delete(\n            `/api/v9/organizations/${organizationId}/subscription/promocode`\n          ),\n      },\n      invoices: {\n        list: (organizationId) => {\n          return this.get(\n            `/api/v9/organizations/${organizationId}/payment_records?is_unified=true`\n          )\n        },\n        next: (organizationId, next) => {\n          return this.get(\n            `/api/v9/organizations/${organizationId}/payment_records?is_unified=true&next=${next}`\n          )\n        },\n        prev: (organizationId, prev) => {\n          return this.get(\n            `/api/v9/organizations/${organizationId}/payment_records?is_unified=true&prev=${prev}`\n          )\n        },\n      },\n      invoiceSummary: {\n        fetch: (organizationId) => {\n          return this.get(\n            `/api/v9/organizations/${organizationId}/subscription/invoice_summary`\n          )\n        },\n        calculate: (organizationId, planTag, userCount) => {\n          return this.get(\n            `/api/v9/organizations/${organizationId}/subscription/invoice_summary?pricing_plan_tag=${planTag}&quantity=${userCount}`\n          )\n        },\n      },\n      trial: {\n        start: (organizationId) => {\n          return this.post(\n            `/api/v9/organizations/${organizationId}/subscription/trial`\n          )\n        },\n      },\n    },\n    invitations: {\n      accept: (invitationCode) =>\n        this.post(`/api/v9/organizations/invitations/${invitationCode}/accept`),\n      invite: (organizationId: number, data) =>\n        this.post(`/api/v9/organizations/${organizationId}/invitations`, {\n          body: JSON.stringify(data),\n        }),\n      reject: (invitationCode) =>\n        this.post(`/api/v9/organizations/invitations/${invitationCode}/reject`),\n      resend: (organizationId, invitationCode) =>\n        this.put(\n          `/api/v9/organizations/${organizationId}/invitations/${invitationCode}/resend`\n        ),\n    },\n  }\n\n  payments: Endpoints['payments'] = {\n    subscribe: (params: SubscribeParams) =>\n      this.post('/payment_wrapper', { body: JSON.stringify(params) }),\n    updateCardDetails: (workspaceId, token) =>\n      this.post('/payment_gateway/api/v1/stripe', {\n        body: JSON.stringify({\n          workspace_id: workspaceId,\n          stripeToken: token,\n        }),\n      }),\n    updateOrganizationCardDetails: (organizationId: number, token: string) =>\n      this.post('/payment_gateway/api/v1/stripe', {\n        body: JSON.stringify({\n          organization_id: organizationId,\n          stripeToken: token,\n        }),\n      }),\n  }\n\n  plan: Endpoints['plan'] = {\n    me: () =>\n      this.get(\n        '/api/v5/me',\n        { credentials: 'include' },\n\n        'plan'\n      ),\n    projects: (workspaceId: number) =>\n      this.get(\n        `/api/v5/${workspaceId}/projects`,\n        { credentials: 'include' },\n\n        'plan'\n      ),\n    tasks: (worksapceId: number, userId: number, start: string, end: string) =>\n      this.get(\n        `/api/v5/${worksapceId}/tasks?since=${start}&until=${end}&short=true&users[]=${userId}`,\n        { credentials: 'include' },\n\n        'plan'\n      ),\n    planProject: (trackProjectId: number) =>\n      this.get(\n        `/api/v4/me/track/plan_project?track_project_id=${trackProjectId}`,\n        { credentials: 'include' },\n        'plan'\n      ),\n    workspace: (workspaceId: number) =>\n      this.get(\n        `/api/v4/workspaces/${workspaceId}`,\n        { credentials: 'include' },\n        'plan'\n      ),\n  }\n\n  project: Endpoints['project'] = {\n    bulkEdit: (workspaceId, projectIds, body) =>\n      this.patch(\n        `/api/v9/workspaces/${workspaceId}/projects/${projectIds.join(',')}`,\n        { body: JSON.stringify(body) }\n      ),\n    create: (workspaceId, data) =>\n      this.getPermissions().then((permissions) =>\n        this.post(`/api/v9/workspaces/${workspaceId}/projects`, {\n          body: JSON.stringify(data),\n          ...useCustomHeaders([() => withPermissions(permissions)]),\n        })\n      ),\n    createProjectGroup: (workspaceId, projectGroup) =>\n      this.post(`/api/v9/workspaces/${workspaceId}/project_groups`, {\n        body: JSON.stringify(projectGroup),\n      }),\n    createProjectUser: (workspaceId, projectUser) =>\n      this.post(`/api/v9/workspaces/${workspaceId}/project_users`, {\n        body: JSON.stringify(projectUser),\n      }),\n    delete: (workspaceId, projectId, deletionMode) =>\n      this.delete(\n        `/api/v9/workspaces/${workspaceId}/projects/${projectId}?teDeletionMode=${deletionMode}`\n      ),\n    deleteProjectGroup: (workspaceId, projectGroupId) =>\n      this.delete(\n        `/api/v9/workspaces/${workspaceId}/project_groups/${projectGroupId}`\n      ),\n    deleteProjectUser: (workspaceId, projectUserId) =>\n      this.delete(\n        `/api/v9/workspaces/${workspaceId}/project_users/${projectUserId}`\n      ),\n    fetchProjectsBillableAmounts: (workspaceId, projectIds) =>\n      this.post(`/api/v9/workspaces/${workspaceId}/projects/billable-amounts`, {\n        body: JSON.stringify({ project_ids: projectIds }),\n      }),\n    fetchProjectById: (workspaceId, projectId, query = {}) => {\n      const urlParams = parametrize(query)\n\n      return this.getPermissions().then((permissions) =>\n        this.get(\n          `/api/v9/workspaces/${workspaceId}/projects/${projectId}${urlParams}`,\n          useCustomHeaders([() => withPermissions(permissions)])\n        )\n      )\n    },\n    fetchProjectGroups: (workspaceId) =>\n      this.get(`/api/v9/workspaces/${workspaceId}/project_groups`),\n    fetchProjectsPage: (workspaceId, page, filters, sort) => {\n      const params = {\n        actual_hours: true,\n        active: true,\n        force: false,\n        page,\n        ...sort,\n        ...filters,\n        billable: filters?.billable == null ? 'both' : filters.billable,\n      }\n\n      const urlParams = parametrize(params)\n\n      return this.getPermissions().then((permissions) =>\n        this.get(\n          `/api/v9/workspaces/${workspaceId}/projects${urlParams}`,\n          useCustomHeaders([() => withPermissions(permissions)])\n        )\n      )\n    },\n    fetchProjectSummary: (workspaceId, projectId, start, end) => {\n      const body = start && end ? { start_date: start, end_date: end } : null\n      return this.post(\n        `/reports/api/v3/workspace/${workspaceId}/projects/${projectId}/summary`,\n        { body: body ? JSON.stringify(body) : null }\n      )\n    },\n    fetchProjectUsers: (workspaceId, projectIds) => {\n      const params = projectIds ? { project_ids: projectIds.join(',') } : null\n\n      let urlParams: string | undefined\n\n      if (params) urlParams = parametrize(params)\n\n      return this.get(\n        `/api/v9/workspaces/${workspaceId}/project_users${urlParams || ''}`\n      )\n    },\n    fetchRecurringPeriods: (workspaceId, projectId) =>\n      this.get(\n        `/api/v9/workspaces/${workspaceId}/projects/${projectId}/periods`\n      ),\n    update: (workspaceId, projectId, data) =>\n      this.getPermissions().then((permissions) =>\n        this.put(`/api/v9/workspaces/${workspaceId}/projects/${projectId}`, {\n          body: JSON.stringify(data),\n          ...useCustomHeaders([() => withPermissions(permissions)]),\n        })\n      ),\n    updateProjectUser: (workspaceId, projectUserId, changes) =>\n      this.put(\n        `/api/v9/workspaces/${workspaceId}/project_users/${projectUserId}`,\n        { body: JSON.stringify(changes) }\n      ),\n    fetchProjectStatistics: (workspaceId: number, projectId: number) =>\n      this.get(\n        `/api/v9/workspaces/${workspaceId}/projects/${projectId}/statistics`\n      ),\n  }\n\n  pushService: Endpoints['pushService'] = {\n    create: (token: string) =>\n      this.post(`/api/v9/me/push_services`, {\n        body: JSON.stringify({ fcm_registration_token: token }),\n      }),\n    delete: (token: string) =>\n      this.delete(`/api/v9/me/push_services`, {\n        body: JSON.stringify({ fcm_registration_token: token }),\n      }),\n  }\n\n  reportExports: Endpoints['reportExports'] = {\n    summary: (workspaceId, params, kind) =>\n      this.post(`exports/api/v1/summary.${kind}`, {\n        body: JSON.stringify({ ...params, workspace_id: workspaceId }),\n      }),\n    detailed: (workspaceId, params, kind) =>\n      this.post(`exports/api/v1/detailed.${kind}`, {\n        body: JSON.stringify({ ...params, workspace_id: workspaceId }),\n      }),\n    weekly: (workspaceId, params, kind) =>\n      this.post(`exports/api/v1/weekly.${kind}`, {\n        body: JSON.stringify({ ...params, workspace_id: workspaceId }),\n      }),\n  }\n\n  reports: Endpoints['reports'] = {\n    filters: {\n      projects: (workspaceId, params) =>\n        this.post(`/reports/api/v3/workspace/${workspaceId}/filters/projects`, {\n          body: JSON.stringify(params),\n        }),\n      tasks: (workspaceId, params) =>\n        this.post(`/reports/api/v3/workspace/${workspaceId}/filters/tasks`, {\n          body: JSON.stringify(params),\n        }),\n    },\n    status: () => this.get('/reports/api/v3/status'),\n    workspace: {\n      comparative: (workspaceId, options) =>\n        this.post(`/reports/api/v3/workspace/${workspaceId}/comparative`, {\n          body: JSON.stringify(options),\n        }),\n      dataTrends: {\n        clients: (workspaceId, options) =>\n          this.post(\n            `/reports/api/v3/workspace/${workspaceId}/data_trends/clients`,\n            { body: JSON.stringify(options) }\n          ),\n        users: (workspaceId, options) =>\n          this.post(\n            `/reports/api/v3/workspace/${workspaceId}/data_trends/users`,\n            { body: JSON.stringify(options) }\n          ),\n      },\n      detailed: {\n        timeEntries: {\n          export: (workspaceId, params, kind) =>\n            this.post(\n              `reports/api/v3/workspace/${workspaceId}/detailed/time_entries.${kind}`,\n              {\n                body: JSON.stringify(params),\n              }\n            ),\n          legacyExportV2: (params, kind) => {\n            const urlParams = parametrize(params)\n            return this.get(`/reports/api/v2/details.${kind}${urlParams}`)\n          },\n        },\n      },\n      profitability: {\n        employee: (workspaceId, options) =>\n          this.post(\n            `/reports/api/v3/workspace/${workspaceId}/profitability/employee`,\n            { body: JSON.stringify(options) }\n          ),\n        projects: (workspaceId, options) =>\n          this.post(\n            `/reports/api/v3/workspace/${workspaceId}/profitability/projects`,\n            { body: JSON.stringify(options) }\n          ),\n      },\n      search: {\n        projects: {\n          fetch: (workspaceId, { include_recurring_totals, ...params }) =>\n            this.post(\n              `/reports/api/v3/workspace/${workspaceId}/search/projects${parametrize(\n                { include_recurring_totals }\n              )}`,\n              {\n                body: JSON.stringify(params),\n              }\n            ),\n        },\n        users: {\n          fetch: (workspaceId, params) =>\n            this.post(`/reports/api/v3/workspace/${workspaceId}/search/users`, {\n              body: JSON.stringify(params),\n            }),\n        },\n        clients: {\n          fetch: (workspaceId, params) =>\n            this.post(\n              `/reports/api/v3/workspace/${workspaceId}/search/clients`,\n              {\n                body: JSON.stringify(params),\n              }\n            ),\n        },\n        tasks: {\n          fetch: (workspaceId, params) =>\n            this.post(`/reports/api/v3/workspace/${workspaceId}/search/tasks`, {\n              body: JSON.stringify(params),\n            }),\n\n          fetchById: (workspaceId, taskIds) =>\n            this.post(`/reports/api/v3/workspace/${workspaceId}/search/tasks`, {\n              body: JSON.stringify({ ids: taskIds }),\n            }),\n        },\n        timeEntries: {\n          export: (workspaceId, params, kind) =>\n            this.post(\n              `/reports/api/v3/workspace/${workspaceId}/search/time_entries.${kind}`,\n              {\n                body: JSON.stringify(params),\n              }\n            ),\n          fetch: (workspaceId, params) =>\n            this.post(\n              `/reports/api/v3/workspace/${workspaceId}/search/time_entries`,\n              { body: JSON.stringify(params) }\n            ),\n          totals: {\n            fetch: (workspaceId, params) =>\n              this.post(\n                `/reports/api/v3/workspace/${workspaceId}/search/time_entries/totals`,\n                { body: JSON.stringify(params) }\n              ),\n          },\n        },\n      },\n      summary: {\n        timeEntries: {\n          export: (workspaceId, params, kind) =>\n            this.post(\n              `/reports/api/v3/workspace/${workspaceId}/summary/time_entries.${kind}`,\n              {\n                body: JSON.stringify(params),\n              }\n            ),\n          fetch: (workspaceId, filters) =>\n            this.post(\n              `/reports/api/v3/workspace/${workspaceId}/summary/time_entries`,\n              {\n                body: JSON.stringify({\n                  ...filters,\n                  include_time_entry_ids: true,\n                }),\n              }\n            ),\n        },\n      },\n      weekly: {\n        timeEntries: {\n          export: (workspaceId, params, kind) =>\n            this.post(\n              `/reports/api/v3/workspace/${workspaceId}/weekly/time_entries.${kind}`,\n              {\n                body: JSON.stringify(params),\n              }\n            ),\n          fetch: (workspaceId, filters) =>\n            this.post(\n              `/reports/api/v3/workspace/${workspaceId}/weekly/time_entries`,\n              {\n                body: JSON.stringify(filters),\n              }\n            ),\n        },\n      },\n    },\n  }\n\n  sharedProject: Endpoints['sharedProject'] = {\n    createUser: (hash: string, name: string, email: string) =>\n      this.post(`/api/v9/shared-project/${hash}/user`, {\n        body: JSON.stringify({ name, email }),\n      }),\n  }\n\n  sharedReport: Endpoints['sharedReport'] = {\n    exportReport: (token, extension, params) =>\n      this.post(`/reports/api/v3/shared/${token}/${extension}`, {\n        body: JSON.stringify(params),\n      }),\n    fetch: (token, { resource, chart_id, is_totals, ...params }) =>\n      this.post(\n        `/reports/api/v3/shared/${token}${parametrize({\n          resource,\n          chart_id,\n          is_totals,\n        })}`,\n        {\n          body: JSON.stringify(params),\n        }\n      ),\n  }\n\n  signup: Endpoints['signup'] = (signup) =>\n    this.post('/api/v9/signup', {\n      body: JSON.stringify(signup),\n    })\n\n  smail: Endpoints['smail'] = {\n    contact: (contact) =>\n      this.post('/api/v9/smail/contact', {\n        body: JSON.stringify(contact),\n      }),\n    demo: (demo) =>\n      this.post('/api/v9/smail/demo', {\n        body: JSON.stringify(demo),\n      }),\n    master: (master) =>\n      this.post('/api/v9/smail/master', {\n        body: JSON.stringify(master),\n      }),\n    meet: (meet) =>\n      this.post('/api/v9/smail/meet', {\n        body: JSON.stringify(meet),\n      }),\n  }\n\n  status: Endpoints['status'] = () => this.get('/api/v9/status')\n\n  tag: Endpoints['tag'] = {\n    create: (name, workspaceId) =>\n      this.getPermissions().then((permissions) =>\n        this.post(`/api/v9/workspaces/${workspaceId}/tags`, {\n          body: JSON.stringify({ name }),\n          ...useCustomHeaders([() => withPermissions(permissions)]),\n        })\n      ),\n    delete: (tag) =>\n      this.delete(`/api/v9/workspaces/${tag.workspace_id}/tags/${tag.id}`),\n    deleteBulk: (workspaceId, tagIds) =>\n      this.patch(`/api/v9/workspaces/${workspaceId}/tags`, {\n        body: JSON.stringify({ delete: tagIds }),\n      }),\n    update: (tag) =>\n      this.getPermissions().then((permissions) =>\n        this.put(`/api/v9/workspaces/${tag.workspace_id}/tags/${tag.id}`, {\n          body: JSON.stringify({ name: tag.name }),\n          ...useCustomHeaders([() => withPermissions(permissions)]),\n        })\n      ),\n  }\n\n  tasks: Endpoints['tasks'] = {\n    bulkEdit: (workspaceId, projectId, taskIds, operations) =>\n      this.patch(\n        `/api/v9/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskIds.join(\n          ','\n        )}`,\n        { body: JSON.stringify(operations) }\n      ),\n    create: (workspaceId, projectId, task) =>\n      this.getPermissions().then((permissions) =>\n        this.post(\n          `/api/v9/workspaces/${workspaceId}/projects/${projectId}/tasks`,\n          {\n            body: JSON.stringify(task),\n            ...useCustomHeaders([() => withPermissions(permissions)]),\n          }\n        )\n      ),\n    delete: (workspaceId, projectId, taskId) =>\n      this.delete(\n        `/api/v9/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}`\n      ),\n    fetch: (workspaceId, params) => {\n      const paramsObj: { [key: string]: string } = {\n        pid: params.pid.toString(),\n        actual_hours: String(params.actual_hours),\n        active: String(params.active),\n        page: params.page.toString(),\n      }\n\n      if (params.start_date) paramsObj.start_date = params.start_date\n      if (params.end_date) paramsObj.end_date = params.end_date\n      if (params.sort_order) paramsObj.sort_order = params.sort_order\n      if (params.sort_field) paramsObj.sort_field = params.sort_field\n\n      const searchParams = new URLSearchParams(paramsObj).toString()\n\n      return this.getPermissions().then((permissions) =>\n        this.get(\n          `/api/v9/workspaces/${workspaceId}/tasks?${searchParams}`,\n          useCustomHeaders([() => withPermissions(permissions)])\n        )\n      )\n    },\n    update: (workspaceId, projectId, taskId, changes) =>\n      this.getPermissions().then((permissions) =>\n        this.put(\n          `/api/v9/workspaces/${workspaceId}/projects/${projectId}/tasks/${taskId}`,\n          {\n            body: JSON.stringify(changes),\n            ...useCustomHeaders([() => withPermissions(permissions)]),\n          }\n        )\n      ),\n  }\n\n  timeEntry: Endpoints['timeEntry'] = {\n    bulkEdit: (timeEntryIds, operations) =>\n      this.patch(`/api/v9/time_entries/${timeEntryIds.join(',')}`, {\n        body: JSON.stringify(operations),\n      }),\n    create: (timeEntry, meta = false) =>\n      this.getPermissions().then((permissions) =>\n        this.post(`/api/v9/time_entries${meta ? '?meta=true' : ''}`, {\n          body: JSON.stringify(timeEntry),\n          ...useCustomHeaders([() => withPermissions(permissions)]),\n        })\n      ),\n    delete: (timeEntry) => this.delete(`/api/v9/time_entries/${timeEntry.id}`),\n    get: (id) =>\n      this.getPermissions().then((permissions) =>\n        this.get(\n          `/api/v9/time_entries/${id}`,\n          useCustomHeaders([() => withPermissions(permissions)])\n        )\n      ),\n    undoDelete: (timeEntryIds) =>\n      this.patch(`/api/v9/time_entries/${timeEntryIds.join(',')}`, {\n        body: JSON.stringify([{ op: 'remove', path: '/deleted_at' }]),\n      }),\n    update: (timeEntryParam, meta = false, query = {}) => {\n      if (meta) {\n        query.meta = meta\n      }\n      const urlParams = parametrize(query)\n      return this.getPermissions().then((permissions) =>\n        this.put(`/api/v9/time_entries/${timeEntryParam.id}${urlParams}`, {\n          body: JSON.stringify(timeEntryParam),\n          ...useCustomHeaders([() => withPermissions(permissions)]),\n        })\n      )\n    },\n  }\n\n  timeline: Endpoints['timeline'] = (startDate, endDate) =>\n    this.get(`/api/v9/timeline?start_date=${startDate}&end_date=${endDate}`)\n\n  timezones: Endpoints['timezones'] = {\n    fetch: () => this.get('/api/v9/timezones'),\n    offsets: () => this.get('/api/v9/timezones/offsets'),\n  }\n\n  webhooks: Endpoints['webhooks'] = {\n    create: (workspaceId, subscription) =>\n      this.post(`/webhooks/api/v1/subscriptions/${workspaceId}`, {\n        body: JSON.stringify(subscription),\n      }),\n    delete: (workspaceId, subscriptionId) =>\n      this.delete(\n        `/webhooks/api/v1/subscriptions/${workspaceId}/${subscriptionId}`\n      ),\n    fetch: (workspaceId) =>\n      this.get(`/webhooks/api/v1/subscriptions/${workspaceId}`),\n    ping: (workspaceId, subscriptionId) =>\n      this.post(`/webhooks/api/v1/ping/${workspaceId}/${subscriptionId}`),\n    status: () => this.get('/webhooks/api/v1/status'),\n    toggle: (workspaceId, enabled, subscriptionId) =>\n      this.patch(\n        `/webhooks/api/v1/subscriptions/${workspaceId}/${subscriptionId}`,\n        { body: JSON.stringify({ enabled }) }\n      ),\n    update: (workspaceId, subscriptionId, subscription) =>\n      this.put(\n        `/webhooks/api/v1/subscriptions/${workspaceId}/${subscriptionId}`,\n        { body: JSON.stringify(subscription) }\n      ),\n    fetchEventFilters: () => this.get('/webhooks/api/v1/event_filters'),\n    fetchEvents: (workspaceId, subscriptionId) =>\n      this.get(\n        `/webhooks/api/v1/subscriptions/${workspaceId}/${subscriptionId}/events`\n      ),\n  }\n\n  workspaces: Endpoints['workspaces'] = {\n    alerts: {\n      create: (alert, workspaceId) =>\n        this.post(`/api/v9/workspaces/${workspaceId}/alerts`, {\n          body: JSON.stringify(alert),\n        }),\n      update: (alert) =>\n        this.put(`/api/v9/workspaces/${alert.wid}/alerts/${alert.id}`, {\n          body: JSON.stringify({\n            source_kind: alert.source_kind,\n            project_id: alert.project_id,\n            threshold_type: alert.threshold_type,\n            thresholds: alert.thresholds,\n            receiver_roles: alert.receiver_roles,\n            receiver_users: alert.receiver_users,\n            receiver_groups: alert.receiver_groups,\n          }),\n        }),\n      delete: (alertId, workspaceId) =>\n        this.delete(`/api/v9/workspaces/${workspaceId}/alerts/${alertId}`),\n      fetch: (workspaceId) =>\n        this.get(`/api/v9/workspaces/${workspaceId}/alerts`),\n    },\n    create: (workspace) =>\n      this.getPermissions().then((permissions) =>\n        this.post(`/api/v9/workspaces`, {\n          body: JSON.stringify(workspace),\n          ...useCustomHeaders([() => withPermissions(permissions)]),\n        })\n      ),\n    currencies: {\n      fetch: (workspaceId) =>\n        this.get(`/api/v9/workspaces/${workspaceId}/currencies`),\n    },\n    dashboard: {\n      fetchActivityByTimeEntry: (workspaceId, since) =>\n        this.get(\n          `/api/v9/workspaces/${workspaceId}/dashboard/top_activity${\n            since ? `?since=${since}` : ''\n          }`\n        ),\n      fetchActivityByUser: (workspaceId, since) =>\n        this.get(\n          `/api/v9/workspaces/${workspaceId}/dashboard/all_activity${\n            since ? `?since=${since}` : ''\n          }`\n        ),\n      fetchMostActive: (workspaceId, since) =>\n        this.get(\n          `/api/v9/workspaces/${workspaceId}/dashboard/most_active${\n            since ? `?since=${since}` : ''\n          }`\n        ),\n    },\n    exports: {\n      start: (workspaceId, data) =>\n        this.post(`/api/v9/workspaces/${workspaceId}/exports`, {\n          body: JSON.stringify(data),\n        }),\n      status: (workspaceId) =>\n        this.get(`/api/v9/workspaces/${workspaceId}/exports`),\n    },\n    fetch: (workspaceId) =>\n      this.getPermissions().then((permissions) =>\n        this.get(\n          `/api/v9/workspaces/${workspaceId}`,\n          useCustomHeaders([() => withPermissions(permissions)])\n        )\n      ),\n    groups: {\n      create: (workspaceId, name) =>\n        this.post(`/api/v9/workspaces/${workspaceId}/groups`, {\n          body: JSON.stringify({ wid: workspaceId, name }),\n        }),\n      delete: (workspaceId, groupId) =>\n        this.delete(`/api/v9/workspaces/${workspaceId}/groups/${groupId}`),\n      list: (workspaceId) =>\n        this.get(`/api/v9/workspaces/${workspaceId}/groups`),\n      update: (workspaceId, groupId, name) =>\n        this.put(`/api/v9/workspaces/${workspaceId}/groups/${groupId}`, {\n          body: JSON.stringify({\n            name,\n          }),\n        }),\n    },\n    iCal: {\n      reset: (workspaceId) =>\n        this.post(`/api/v9/workspaces/${workspaceId}/ical/reset`),\n      set: (workspaceId, value) =>\n        this.post(`/api/v9/workspaces/${workspaceId}/ical/toggle`, {\n          body: JSON.stringify(value),\n        }),\n    },\n    linkedSsoProfiles: {\n      fetch: (workspaceId: number) =>\n        this.get(`/api/v9/workspaces/${workspaceId}/linked_sso_profiles`),\n      create: (workspaceId: number, ssoProfileId: number) =>\n        this.put(\n          `/api/v9/workspaces/${workspaceId}/linked_sso_profiles/${ssoProfileId}`\n        ),\n      delete: (workspaceId: number, ssoProfileId: number) =>\n        this.delete(\n          `/api/v9/workspaces/${workspaceId}/linked_sso_profiles/${ssoProfileId}`\n        ),\n    },\n    logo: {\n      fetch: (workspaceId) =>\n        this.get(`/api/v9/workspaces/${workspaceId}/logo`),\n      remove: (workspaceId) =>\n        this.delete(`/api/v9/workspaces/${workspaceId}/logo`),\n      upload: (workspaceId, data) =>\n        this.post(`/api/v9/workspaces/${workspaceId}/logo`, { body: data }),\n    },\n    preferences: {\n      fetch: (workspaceId) =>\n        this.get(`/api/v9/workspaces/${workspaceId}/preferences`),\n      update: (workspaceId, change) =>\n        this.post(`/api/v9/workspaces/${workspaceId}/preferences`, {\n          body: JSON.stringify(change),\n        }),\n    },\n    paymentRecords: {\n      list: (workspaceId: number) =>\n        this.get(`/api/v9/workspaces/${workspaceId}/payment_records`),\n    },\n    plans: {\n      list: (workspaceId: number) =>\n        this.get(`/api/v9/workspaces/${workspaceId}/plans`),\n    },\n    projects: {\n      fetch: (workspaceId, page, since, filters) => {\n        const urlParams = parametrize({\n          page,\n          since,\n          client_ids: filters?.clientIds,\n        })\n        return this.getPermissions().then((permissions) =>\n          this.get(\n            `/api/v9/workspaces/${workspaceId}/projects${urlParams}`,\n            useCustomHeaders([() => withPermissions(permissions)])\n          )\n        )\n      },\n    },\n    rates: {\n      create: (workspaceId, rate) =>\n        this.post(`/api/v9/workspaces/${workspaceId}/rates`, {\n          body: JSON.stringify(rate),\n        }),\n      delete: (workspaceId, rateId) =>\n        this.delete(`/api/v9/workspaces/${workspaceId}/rates/${rateId}`),\n      list: (workspaceId, level, levelId) =>\n        this.get(`/api/v9/workspaces/${workspaceId}/rates/${level}/${levelId}`),\n    },\n    reminders: {\n      create: (reminder) =>\n        this.post(\n          `/api/v9/workspaces/${reminder.workspace_id}/track_reminders`,\n          { body: JSON.stringify(reminder) }\n        ),\n      delete: (reminderId, workspaceId) =>\n        this.delete(\n          `/api/v9/workspaces/${workspaceId}/track_reminders/${reminderId}`\n        ),\n      fetch: (workspaceId) =>\n        this.get(`/api/v9/workspaces/${workspaceId}/track_reminders`),\n      update: (reminder) =>\n        this.put(\n          `/api/v9/workspaces/${reminder.workspace_id}/track_reminders/${reminder.reminder_id}`,\n          { body: JSON.stringify(reminder) }\n        ),\n    },\n    reports: {\n      shared: {\n        create: (workspaceId, data) =>\n          this.post(`/api/v9/workspaces/${workspaceId}/reports/shared`, {\n            body: JSON.stringify(data),\n          }),\n        delete: (workspaceId, ids) =>\n          this.patch(\n            `/api/v9/workspaces/${workspaceId}/reports/shared/bulk_delete`,\n            { body: JSON.stringify({ ids }) }\n          ),\n        get: (workspaceId, search) => {\n          const urlParams = parametrize(search)\n          return this.get(\n            `/api/v9/workspaces/${workspaceId}/reports/shared${urlParams}`\n          )\n        },\n        update: (workspaceId, id, data) =>\n          this.put(`/api/v9/workspaces/${workspaceId}/reports/shared/${id}`, {\n            body: JSON.stringify(data),\n          }),\n      },\n    },\n    scheduledReports: {\n      delete: (workspaceId, reportId) =>\n        this.delete(\n          `/api/v9/workspaces/${workspaceId}/scheduled_reports/${reportId}`\n        ),\n      fetch: (workspaceId) =>\n        this.get(`/api/v9/workspaces/${workspaceId}/scheduled_reports`),\n      save: (workspaceId, report) =>\n        this.post(`/api/v9/workspaces/${workspaceId}/scheduled_reports`, {\n          body: JSON.stringify(report),\n        }),\n    },\n    sso: {\n      deleteConfig: (workspaceId) =>\n        this.delete(`/api/v9/workspaces/${workspaceId}/sso`),\n      fetchConfig: (workspaceId) =>\n        this.get(`/api/v9/workspaces/${workspaceId}/sso`),\n      updateConfig: (workspaceId, config) =>\n        this.post(`/api/v9/workspaces/${workspaceId}/sso`, {\n          body: JSON.stringify(config),\n        }),\n    },\n    tags: {\n      fetch: (workspaceId, page, since) => {\n        const urlParams = parametrize({\n          page,\n          since,\n        })\n\n        return this.getPermissions().then((permissions) => {\n          return this.get(\n            `/api/v9/workspaces/${workspaceId}/tags${urlParams}`,\n            useCustomHeaders([() => withPermissions(permissions)])\n          )\n        })\n      },\n    },\n    templates: {\n      fetch: (workspaceId) =>\n        this.get(`/api/v9/workspaces/${workspaceId}/projects/templates`),\n    },\n    subscription: {\n      acceptTermsOfService: (workspaceId: number) =>\n        this.post(`/api/v9/workspaces/${workspaceId}/subscription/inc_accept`),\n      acceptVat: (workspaceId: number) =>\n        this.post(`/api/v9/workspaces/${workspaceId}/subscription/vat_accept`),\n      calculate: (workspaceId, userCount, period) =>\n        this.post(`/api/v9/workspaces/${workspaceId}/subscription/calculate`, {\n          body: JSON.stringify({\n            user_count: userCount,\n            period,\n          }),\n        }),\n      fetchSelectedFeatures: (workspaceId: number) =>\n        this.get(\n          `/api/v9/workspaces/${workspaceId}/subscription/selected_features`\n        ),\n      get: (workspaceId: number) =>\n        this.get(`/api/v9/workspaces/${workspaceId}/subscription`),\n      purchaseOrders: {\n        create: (workspaceId: number, userCount: number) =>\n          this.post(\n            `/api/v9/workspaces/${workspaceId}/subscription/purchase_orders`,\n            {\n              body: JSON.stringify({\n                user_count: userCount,\n              }),\n            }\n          ),\n      },\n      update: (\n        workspaceId: number,\n        data: {\n          pricing_plan_id: PricingPlan\n        }\n      ) =>\n        this.post(`/api/v9/workspaces/${workspaceId}/subscription`, {\n          body: JSON.stringify(data),\n        }),\n    },\n    timeEntries: {\n      constraints: {\n        fetch: (workspaceId) =>\n          this.get(\n            `/api/v9/workspaces/${workspaceId}/preferences/time_entry_constraints`\n          ),\n        update: (workspaceId, data) =>\n          this.post(\n            `/api/v9/workspaces/${workspaceId}/preferences/time_entry_constraints`,\n            {\n              body: JSON.stringify(data),\n            }\n          ),\n      },\n      create: (timeEntry) =>\n        this.getPermissions().then((permissions) =>\n          this.post(\n            `/api/v9/workspaces/${timeEntry.workspace_id}/time_entries`,\n            {\n              body: JSON.stringify(timeEntry),\n              ...useCustomHeaders([() => withPermissions(permissions)]),\n            }\n          )\n        ),\n      delete: (workspaceId, timeEntryIds) => {\n        const operation = {\n          op: 'add',\n          path: '/deleted_at',\n          value: new Date().toISOString(),\n        }\n\n        return this.patch(\n          `/api/v9/workspaces/${workspaceId}/time_entries/${timeEntryIds.join(\n            ','\n          )}`,\n          { body: JSON.stringify([operation]) }\n        )\n      },\n      update: (timeEntry) =>\n        this.getPermissions().then((permissions) =>\n          this.put(\n            `/api/v9/workspaces/${timeEntry.workspace_id}/time_entries/${timeEntry.id}`,\n            {\n              body: JSON.stringify(timeEntry),\n              ...useCustomHeaders([() => withPermissions(permissions)]),\n            }\n          )\n        ),\n    },\n    update: (workspace) =>\n      this.getPermissions().then((permissions) =>\n        this.put(`/api/v9/workspaces/${workspace.id}`, {\n          body: JSON.stringify(workspace),\n          ...useCustomHeaders([() => withPermissions(permissions)]),\n        })\n      ),\n    users: {\n      fetch: (workspaceId) =>\n        this.get(`/api/v9/workspaces/${workspaceId}/workspace_users`),\n      put: (workspaceId, userId, data) =>\n        this.put(`/api/v9/workspaces/${workspaceId}/users/${userId}`, {\n          body: JSON.stringify(data),\n        }),\n      removeWorkspaceUser: (workspaceId, workspaceUserId) =>\n        this.delete(\n          `/api/v9/workspaces/${workspaceId}/workspace_users/${workspaceUserId}`\n        ),\n      updateWorkspaceUser: (workspaceId, workspaceUserId, data) =>\n        this.put(\n          `/api/v9/workspaces/${workspaceId}/workspace_users/${workspaceUserId}`,\n          { body: JSON.stringify(data) }\n        ),\n    },\n    invoices: {\n      save: (invoice) =>\n        this.post(`/api/v9/workspaces/${invoice.workspace_id}/invoices`, {\n          body: JSON.stringify(invoice),\n        }),\n      list: (workspaceId, page = 1) => {\n        const urlParams = parametrize({\n          page,\n          per_page: 25,\n        })\n        return this.get(\n          `/api/v9/workspaces/${workspaceId}/invoices${urlParams}`\n        )\n      },\n      delete: (workspaceId, invoiceId) =>\n        this.delete(`/api/v9/workspaces/${workspaceId}/invoices/${invoiceId}`),\n    },\n  }\n}\n","import { Tag, TimeEntryRequest, TimeEntryV9 } from '@toggl/track-types';\nimport { MessageFrom, MutableTimeEntryV9 } from '..';\nimport { Db } from './db';\n\nexport const updateDefaultProjects = async (\n  from: MessageFrom,\n  projectId: number | null | undefined\n) => {\n  const rememberPer = await Db.get('rememberProjectPer');\n\n  if (rememberPer !== 'none') {\n    const defaultProjects = (await Db.getLocal('defaultProjects')) || '{}';\n\n    await Db.setLocal('defaultProjects', {\n      ...defaultProjects,\n      [rememberPer === 'integration' ? from.origin! : from.url!]: projectId,\n    });\n  }\n};\n\nexport const setProject = async (te: TimeEntryRequest, from: MessageFrom) => {\n  const entry = te as TimeEntryRequest & {\n    project_id?: number;\n    workspace_id?: number;\n    billable: boolean;\n  };\n\n  const rememberPer = await Db.get('rememberProjectPer');\n  const defaultProjectId = await Db.get('defaultProject');\n\n  if (from.type === 'contentScript') {\n    if (rememberPer !== 'none' && !entry.project_id) {\n      const defaultProjects = (await Db.getLocal('defaultProjects')) || {};\n\n      const projects = await Db.getLocal('projects');\n      entry.project_id =\n        rememberPer === 'integration'\n          ? defaultProjects[from.origin!]\n          : defaultProjects[from.url!];\n      entry.billable =\n        entry.billable || projects[entry.project_id ?? '']?.billable;\n      entry.workspace_id =\n        projects[entry.project_id ?? '']?.workspace_id ?? entry.workspace_id;\n    }\n  }\n\n  if (!entry.project_id && defaultProjectId) {\n    const projects = await Db.getLocal('projects');\n    const defaultProject = projects[defaultProjectId];\n    entry.project_id = defaultProjectId;\n    entry.workspace_id = defaultProject.workspace_id;\n    entry.billable = entry.billable || projects[defaultProjectId].billable;\n  }\n\n  return entry;\n};\n\nexport const ensureSameWorkspace = async (\n  te: TimeEntryV9 | TimeEntryRequest\n) => {\n  const entry = Object.assign({}, te) as MutableTimeEntryV9;\n\n  delete entry.pid;\n  delete entry.tid;\n  delete entry.wid;\n  delete entry.uid;\n\n  if (entry.project_id) {\n    const projects = await Db.getLocal('projects');\n    const project = projects[entry.project_id];\n    entry.workspace_id = project.workspace_id;\n  }\n\n  if (entry.tag_ids?.length) {\n    const tags = (await Db.getLocal('tags')) as Record<string, Tag>;\n    const tagsNames = entry.tag_ids.map(id => tags[id]?.name);\n    entry.tags = tagsNames;\n  } else {\n    entry.tags = [];\n  }\n\n  delete entry.tag_ids;\n\n  return entry as TimeEntryV9;\n};\n","import { API } from '@toggl/track-api';\n\nconst apiClient = new API({\n  host: process.env.API_URL,\n  version: `@toggl/track-extension ${process.env.VERSION}`,\n  headers: {\n    'X-Toggl-Client': 'track-extension',\n  },\n  skipPermissionsDependency: true,\n  accountsHost: process.env.TOGGL_ACCOUNTS_API,\n});\n\nexport default apiClient;\n","import * as Browser from 'webextension-polyfill';\n\nimport { OrganizationFeatures, Workspace } from '@toggl/track-types';\nimport * as errorReport from '@src/lib/errorReport';\nimport cache from 'webext-storage-cache';\nimport apiClient from './_api';\n\nexport const fetch = (force?: boolean) => {\n  return cache.function(\n    async () => {\n      try {\n        const { data: user } = await apiClient.me.get();\n        Browser.action.setBadgeText({ text: '' });\n        return user;\n      } catch (e) {\n        Browser.action.setBadgeText({ text: 'x' });\n        Browser.action.setBadgeTextColor({ color: '#FFF' });\n        Browser.action.setBadgeBackgroundColor({ color: '#F00' });\n        await cache.delete('user');\n        return undefined;\n      }\n    },\n    {\n      cacheKey: () => 'user',\n      maxAge: { hours: 1 },\n      staleWhileRevalidate: { minutes: 3 },\n      shouldRevalidate: () => !!force,\n    }\n  )();\n};\n\nexport const logOut = async () => {\n  await apiClient.me.logout();\n  await cache.delete('user');\n  await Browser.storage.local.clear();\n  void Browser.tabs.query({ active: true, currentWindow: true }).then(tabs => {\n    tabs.forEach(tab => {\n      Browser.tabs.remove(tab.id!);\n    });\n  });\n};\n\nexport const fetchWorkspaces = async (refresh = false) => {\n  try {\n    const result = await apiClient.me.workspaces\n      .list(null)\n      .then(res => res.data);\n    const byId = result.reduce((acc, ws) => {\n      return {\n        ...acc,\n        [ws.id]: ws,\n      };\n    }, {} as Record<number, Workspace>);\n    Browser.storage.local.set({ workspaces: byId });\n    return byId;\n  } catch (e) {\n    errorReport.error(e);\n    throw e;\n  }\n};\n\nexport const fetchWorkspacePreferences = async (workspaceId: number) => {\n  try {\n    const result = await apiClient.workspaces.preferences\n      .fetch(workspaceId)\n      .then(res => res.data);\n    Browser.storage.local.set({ workspacePreferences: result });\n    return result;\n  } catch (e) {\n    errorReport.error(e);\n    throw e;\n  }\n};\n\nexport const fetchWorkspaceFeatures = async () => {\n  try {\n    const result = await apiClient.me.features.list().then(res => res.data);\n\n    Browser.storage.local.set({ workspaceFeatures: result });\n    return result;\n  } catch (e) {\n    errorReport.error(e);\n    throw e;\n  }\n};\n\nexport const fetchOrganizationFeatures = async (refresh = false) => {\n  const { organizationFeatures } = await Browser.storage.local.get(\n    'organizationFeatures'\n  );\n  if (organizationFeatures && !refresh)\n    return organizationFeatures as OrganizationFeatures[];\n\n  try {\n    const result = await apiClient.me.features.organization\n      .list()\n      .then(res => res.data);\n    Browser.storage.local.set({ organizationFeatures: result });\n    return result;\n  } catch (e) {\n    errorReport.error(e);\n    throw e;\n  }\n};\n","import { DateTime, Interval } from 'luxon';\nimport { defineMessages } from 'react-intl';\nimport { Db } from './db';\nimport intl from './intl';\nimport Browser from 'webextension-polyfill';\n\nconst ALARM_ID = 'time-tracking-reminder';\nconst REMINDER_NOTIFICATION_ID = 'reminder-notification';\n\nconst messages = defineMessages({\n  notification: {\n    id: 'notification.rememberTracking',\n    defaultMessage: \"Don't forget to track your time.\",\n  },\n  button: {\n    id: 'notification.button',\n    defaultMessage: 'Disable reminder',\n  },\n});\n\nexport async function configurePeriodicReminder() {\n  const enabled = await Db.get('remindersCheckEnabled');\n\n  if (!enabled) return;\n\n  const alarm = await Browser.alarms.get(ALARM_ID);\n\n  if (alarm) await Browser.alarms.clear(alarm.name);\n\n  createPeriodicReminder();\n}\n\nasync function createPeriodicReminder() {\n  const periodicity = await Db.get('remindersInterval');\n\n  Browser.alarms.create(ALARM_ID, {\n    delayInMinutes: periodicity,\n  });\n\n  Browser.alarms.onAlarm.addListener(async alarm => {\n    if (alarm.name === ALARM_ID) {\n      const [from, to] = await Db.get('remindersFromTo');\n\n      const interval = Interval.fromDateTimes(\n        DateTime.fromISO(from),\n        DateTime.fromISO(to)\n      );\n\n      if (interval.contains(DateTime.now())) {\n        void Browser.notifications.create(REMINDER_NOTIFICATION_ID, {\n          type: 'basic',\n          iconUrl: 'images/icon-128.png',\n          title: 'Toggl Track',\n          message: intl.formatMessage(messages.notification),\n          buttons: [\n            {\n              title: intl.formatMessage(messages.button),\n            },\n          ],\n        });\n\n        Browser.notifications.onButtonClicked.addListener(notificationId => {\n          if (notificationId === REMINDER_NOTIFICATION_ID) {\n            Db.set('remindersCheckEnabled', false);\n          }\n        });\n      }\n    }\n  });\n}\n\nexport async function clearPeriodicReminder() {\n  const alarm = await Browser.alarms.get(ALARM_ID);\n\n  if (alarm) await Browser.alarms.clear(alarm.name);\n}\n","import { TimeEntryV9, TimeEntryConstraints } from '@toggl/track-types';\nimport { DateTime } from 'luxon';\nimport Browser from 'webextension-polyfill';\nimport { defineMessages } from 'react-intl';\nimport intl from './intl';\nimport { checkUnmetConstraints } from './utils';\nimport * as timeEntriesApi from '@src/background/_internal/timeEntry';\nimport * as errorReport from '@src/lib/errorReport';\nimport * as userApi from '@src/background/_internal/user';\n\nconst TE_CONSTRAINTS_NOTIFICATION_ID = 'te-constraints-notification';\n\nconst messages = defineMessages({\n  timeEntryConstraints: {\n    id: 'timeEntries.notifications.timeEntryConstraints',\n    defaultMessage: `To stop the timer, add required {fields} field(s).`,\n  },\n  requiredField: {\n    id: 'timeEntries.notifications.requiredFields',\n    defaultMessage:\n      '{field, select, description {description} tag {tag} project {project} task {task} other {Unknown}}',\n  },\n});\n\nasync function fetchTEConstraints(): Promise<TimeEntryConstraints | null> {\n  const user = await userApi.fetch();\n\n  if (!user)\n    return new Promise((resolve, reject) =>\n      reject(new Error(`Can't fetch user data`))\n    );\n\n  const defaultWSId = user.default_workspace_id as number;\n\n  const wsFeats = await userApi.fetchOrganizationFeatures();\n\n  const workspaces = await userApi.fetchWorkspaces();\n\n  const defaultWSFeatures = wsFeats.find(\n    feats => feats.organization_id === workspaces[defaultWSId].organization_id\n  );\n\n  if (\n    defaultWSFeatures?.features.find(\n      feat => feat.name === 'time_entry_constraints' && feat.enabled\n    )\n  ) {\n    const constraints = await timeEntriesApi.fetchConstraints(defaultWSId);\n\n    return new Promise(resolve => resolve(constraints));\n  } else {\n    return new Promise(resolve => resolve(null));\n  }\n}\n\nexport async function fetchAndStopRunningTE(stop?: string) {\n  const timeEntriesData = await timeEntriesApi.fetch();\n\n  const runningTimeEntry = Object.values(timeEntriesData).find(\n    te => te?.duration < 0\n  );\n\n  if (!runningTimeEntry) return;\n\n  if (runningTimeEntry)\n    void stopRunningTimeEntry(runningTimeEntry, null).then(() => {\n      Browser.runtime.sendMessage({ type: 'updateTEs' });\n    });\n}\n\nexport async function stopRunningTimeEntry(\n  timeEntry: TimeEntryV9,\n  stop: string | null\n) {\n  try {\n    const stopTime = stop ? DateTime.fromISO(stop) : DateTime.now();\n    const startTime = DateTime.fromISO(timeEntry.start);\n\n    if (stopTime < startTime) timeEntriesApi.remove(timeEntry);\n\n    const teConstraints = await fetchTEConstraints();\n    const unmetConstraints = checkUnmetConstraints(teConstraints, timeEntry);\n\n    if (unmetConstraints.length === 0) {\n      return timeEntriesApi.update(\n        {\n          ...timeEntry,\n          tag_ids: timeEntry.tag_ids ?? [],\n          stop: stopTime.toISO(),\n          duration: Math.floor(stopTime.diff(startTime).as('seconds')),\n        },\n        {\n          type: 'popup',\n        }\n      );\n    } else {\n      Browser.notifications.create(TE_CONSTRAINTS_NOTIFICATION_ID, {\n        type: 'basic',\n        iconUrl: 'images/icon-128.png',\n        title: 'Toggl Track',\n        message: intl.formatMessage(messages.timeEntryConstraints, {\n          fields: intl.formatList(\n            unmetConstraints.map(field =>\n              intl.formatMessage(messages.requiredField, { field })\n            )\n          ),\n        }),\n      });\n    }\n  } catch (e) {\n    errorReport.error(e);\n  }\n}\n","import * as Browser from 'webextension-polyfill';\nimport { Db } from './db';\nimport * as timeEntriesApi from '@src/background/_internal/timeEntry';\nimport { stopRunningTimeEntry } from './timeEntries';\nimport { DateTime } from 'luxon';\n\nconst ALARM_ID = 'toggl-track-pomodoro';\n\nconst playSound = async () => {\n  let url = chrome.runtime.getURL('src/content/audio/index.html');\n  const audioFile = Browser.runtime.getURL('sounds/time_is_up_1.mp3');\n\n  const volume = await Db.get('pomodoroSoundVolume');\n\n  url += `?volume=${volume}&src=${audioFile}&length=2000`;\n\n  void Browser.windows.create({\n    type: 'popup',\n    focused: false,\n    top: 1,\n    left: 1,\n    height: 1,\n    width: 1,\n    url,\n  });\n};\n\nconst timeFinished = async () => {\n  const pomodoroEnabled = await Db.get('pomodoroModeEnabled');\n  if (!pomodoroEnabled) return;\n\n  const pomodoroSoundEnabled = await Db.get('pomodoroSoundEnabled');\n  if (pomodoroSoundEnabled) void playSound();\n\n  const shouldStopEntry = await Db.get('pomodoroStopTimeTrackingWhenTimerEnds');\n  if (!shouldStopEntry) return;\n\n  const timeEntriesData = await timeEntriesApi.fetch();\n\n  const runningTimeEntry = Object.values(timeEntriesData).find(\n    te => te?.duration < 0\n  );\n\n  if (!runningTimeEntry) return;\n\n  const pomodoroInterval = await Db.get('pomodoroInterval');\n\n  if (runningTimeEntry)\n    stopRunningTimeEntry(\n      runningTimeEntry,\n      DateTime.fromISO(runningTimeEntry.start)\n        .plus({ minutes: Number(pomodoroInterval) })\n        .toISO()\n    ).then(() => {\n      Browser.runtime.sendMessage({ type: 'updateTEs' });\n    });\n};\n\nexport const configurePomodoro = async () => {\n  const pomodoroEnabled = await Db.get('pomodoroModeEnabled');\n  if (!pomodoroEnabled) return;\n\n  const pomodoroInterval = await Db.get('pomodoroInterval');\n\n  Browser.alarms.create(ALARM_ID, {\n    // *60000 because we need to convert from minutes to milliseconds\n    when: Date.now() + pomodoroInterval * 60000,\n  });\n};\n\nBrowser.alarms.onAlarm.addListener(alarm => {\n  if (alarm.name === ALARM_ID) void timeFinished();\n});\n\nexport const clearPomodoroAlert = () => {\n  void Browser.alarms.clear(ALARM_ID);\n};\n","import * as Browser from 'webextension-polyfill';\n\nimport { TimeEntryRequest, TimeEntryV9 } from '@toggl/track-types';\n\nimport { MessageFrom, MutableTimeEntryV9 } from '@src/index';\nimport {\n  ensureSameWorkspace,\n  setProject,\n  updateDefaultProjects,\n} from '@src/lib/projectUtils';\nimport { setTETags } from '@src/lib/utils';\nimport {\n  clearPeriodicReminder,\n  configurePeriodicReminder,\n} from '@src/lib/reminders';\nimport * as errorReport from '@src/lib/errorReport';\nimport * as user from '@src/background/_internal/user';\n\nimport apiClient from './_api';\nimport { clearPomodoroAlert, configurePomodoro } from '@src/lib/pomodoro';\nimport { Db } from '@src/lib/db';\nimport { fetchAndStopRunningTE } from '@src/lib/timeEntries';\n\ntype MutableTimeEntryRequest = {\n  -readonly [K in keyof Omit<\n    TimeEntryRequest,\n    'created_with'\n  >]: TimeEntryRequest[K];\n};\n\nexport const current = async () => {\n  try {\n    const { data: entry } = await apiClient.me.timeEntries.current();\n    return entry;\n  } catch (error) {\n    if (error?.response?.status === 404) return null;\n    errorReport.error(error);\n    throw error;\n  }\n};\n\nexport const fetch = async () => {\n  try {\n    const { data: entries } = await apiClient.me.timeEntries.list(null);\n    const byId = entries.reduce((acc, te) => {\n      return {\n        ...acc,\n        [te.id]: te,\n      };\n    }, {} as Record<number, TimeEntryV9>);\n\n    Browser.storage.local.set({ timeEntries: byId });\n    return byId;\n  } catch (e) {\n    errorReport.error(e);\n    throw e;\n  }\n};\n\nconst create = async (\n  entry: Omit<TimeEntryRequest, 'created_with'>,\n  from?: MessageFrom\n) => {\n  try {\n    await fetchAndStopRunningTE();\n    const value = await Browser.storage.local.get('timeEntries');\n    const te = Object.assign({}, entry) as MutableTimeEntryRequest;\n    delete te.stop;\n    const { data } = await apiClient.workspaces.timeEntries.create({\n      ...te,\n      created_with: `TrackExtension/${process.env.VERSION}${\n        from?.source ? `-${from.source}` : ''\n      }`,\n    });\n    await Browser.storage.local.set({\n      timeEntries: {\n        ...value.timeEntries,\n        [data.id]: data,\n      },\n    });\n    return data;\n  } catch (e) {\n    errorReport.error(e);\n    throw e;\n  }\n};\n\nexport const start = async (entry: TimeEntryRequest, from: MessageFrom) => {\n  let _entry = (await setProject(entry, from)) as unknown as TimeEntryRequest;\n  _entry = (await setTETags(_entry, from)) as unknown as TimeEntryRequest;\n  _entry = (await ensureSameWorkspace(entry)) as unknown as TimeEntryRequest;\n  clearPeriodicReminder();\n  configurePomodoro();\n  Db.set('tesListOnboardingStep', 'finished');\n  return create(_entry, from);\n};\n\nexport const update = async (entry: TimeEntryV9, from: MessageFrom) => {\n  try {\n    if (from.type === 'contentScript')\n      updateDefaultProjects(from, entry.project_id);\n    const _entry = await ensureSameWorkspace(entry);\n    configurePeriodicReminder();\n\n    const value = await Browser.storage.local.get('timeEntries');\n    const runningTimeEntry = Object.values<TimeEntryV9>(\n      value?.timeEntries\n    ).find(te => te?.duration < 0);\n\n    if (\n      !!runningTimeEntry &&\n      entry.id === runningTimeEntry.id &&\n      entry.duration > 0\n    )\n      clearPomodoroAlert();\n\n    delete (_entry as MutableTimeEntryV9).stop;\n    const { data } = await apiClient.workspaces.timeEntries.update(_entry);\n    await Browser.storage.local.set({\n      timeEntries: {\n        ...value?.timeEntries,\n        [data.id]: data,\n      },\n    });\n\n    return data;\n  } catch (e) {\n    errorReport.error(e);\n    throw e;\n  }\n};\n\nexport const remove = async (timeEntry: TimeEntryV9) => {\n  try {\n    await apiClient.workspaces.timeEntries.delete(timeEntry.workspace_id, [\n      timeEntry.id,\n    ]);\n\n    Browser.storage.local.get('timeEntries').then(value => {\n      const nextTEs = value.timeEntries;\n      delete nextTEs[timeEntry.id];\n\n      Browser.storage.local.set({\n        timeEntries: nextTEs,\n      });\n    });\n  } catch (e) {\n    errorReport.error(e);\n    throw e;\n  }\n};\n\nexport const fetchConstraints = async (workspaceId: number) => {\n  try {\n    const organizationFeatures = await user.fetchOrganizationFeatures();\n    const workspaces = await user.fetchWorkspaces();\n\n    const workspaceFeatures = organizationFeatures.find(\n      feats => feats.organization_id === workspaces[workspaceId].organization_id\n    );\n\n    const hasTEConstraintsFeature = workspaceFeatures?.features.find(\n      feat => feat.name === 'time_entry_constraints' && feat.enabled\n    );\n\n    const result = hasTEConstraintsFeature\n      ? await apiClient.workspaces.timeEntries.constraints\n          .fetch(workspaceId)\n          .then(res => res.data)\n      : null;\n\n    await Browser.storage.local.set({ timeEntriesConstraints: result });\n\n    return result;\n  } catch (e) {\n    errorReport.error(e);\n    throw e;\n  }\n};\n"],"names":["parametrize","params","filteredParams","param","paramsString","useCustomHeaders","headersArray","acc","header","withPermissions","usePermissions","API","Base","data","credentials","closeAllSessions","signup","orgId","chartId","changes","permissions","permission","dashboardId","descriptor","kind","useToken","token","wid","filters","setupId","updateFields","timesheetSetupId","startDate","email","client","file","formData","integrationId","selectedOnly","pageToken","endDate","eventId","calendarId","events","workspaceId","filter","searchParams","projects","countryId","flags","options","extension","service","redirectUrl","configuration","enabled","jira_active_site","filtering_data","invoiceData","code","currentPassword","newPassword","since","ssoEnable","meta","favoriteId","login","lostPassword","password","id","updatedPreferences","urlParams","stopDate","include_sharing","invitationId","unsubType","updatedUser","state","organizationName","workspaceName","organizationId","contactDetails","group","organizationGroupId","segmentation","pricingPlanId","organization","organizationUserIds","organizationUserId","organizationUser","workspace","workspaceUsersIds","newOwnerId","ongoing","transferId","action","immediateCancel","userCount","period","priceTag","name","postalCode","country","taxNumber","address","promoCode","next","prev","planTag","invitationCode","worksapceId","userId","start","end","trackProjectId","projectIds","body","projectGroup","projectUser","projectId","deletionMode","projectGroupId","projectUserId","query","page","sort","include_recurring_totals","taskIds","hash","resource","chart_id","is_totals","contact","demo","master","meet","tag","tagIds","operations","task","taskId","paramsObj","timeEntryIds","timeEntry","timeEntryParam","subscription","subscriptionId","alert","alertId","groupId","value","ssoProfileId","change","rate","rateId","level","levelId","reminder","reminderId","ids","search","reportId","report","config","operation","workspaceUserId","invoice","invoiceId","updateDefaultProjects","from","rememberPer","Db","defaultProjects","setProject","te","entry","defaultProjectId","_b","_a","_e","_d","_c","defaultProject","ensureSameWorkspace","project","tags","tagsNames","apiClient","fetch","force","cache","user","Browser.action","logOut","Browser.storage","Browser.tabs","tabs","tab","fetchWorkspaces","refresh","byId","res","ws","e","errorReport.error","fetchWorkspacePreferences","result","fetchWorkspaceFeatures","fetchOrganizationFeatures","organizationFeatures","ALARM_ID","REMINDER_NOTIFICATION_ID","messages","defineMessages","configurePeriodicReminder","alarm","Browser","createPeriodicReminder","periodicity","to","Interval","DateTime","intl","notificationId","clearPeriodicReminder","TE_CONSTRAINTS_NOTIFICATION_ID","fetchTEConstraints","userApi.fetch","resolve","reject","defaultWSId","wsFeats","userApi.fetchOrganizationFeatures","workspaces","userApi.fetchWorkspaces","defaultWSFeatures","feats","feat","constraints","timeEntriesApi.fetchConstraints","fetchAndStopRunningTE","stop","timeEntriesData","timeEntriesApi.fetch","runningTimeEntry","stopRunningTimeEntry","stopTime","startTime","timeEntriesApi.remove","teConstraints","unmetConstraints","checkUnmetConstraints","timeEntriesApi.update","field","playSound","url","audioFile","Browser.runtime","Browser.windows","timeFinished","pomodoroInterval","configurePomodoro","Browser.alarms","clearPomodoroAlert","current","error","entries","create","_entry","setTETags","update","remove","nextTEs","fetchConstraints","user.fetchOrganizationFeatures","user.fetchWorkspaces","workspaceFeatures"],"mappings":"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"}